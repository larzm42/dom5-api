package com.larz.dom5api;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MonsterRepository2 extends JpaRepository<Monster, Long> {
	public List<Monster> findByMason(Boolean mason);
	public Page<Monster> findByMason(Boolean mason, Pageable page);
	public List<Monster> findByMason(Boolean mason, Sort sort);
	public List<Monster> findByMastersmith(Boolean mastersmith);
	public Page<Monster> findByMastersmith(Boolean mastersmith, Pageable page);
	public List<Monster> findByMastersmith(Boolean mastersmith, Sort sort);
	public List<Monster> findByMaxage(Integer maxage);
	public Page<Monster> findByMaxage(Integer maxage, Pageable page);
	public List<Monster> findByMaxage(Integer maxage, Sort sort);
	public List<Monster> findByMaxageLessThan(Integer maxage);
	public Page<Monster> findByMaxageLessThan(Integer maxage, Pageable page);
	public List<Monster> findByMaxageLessThan(Integer maxage, Sort sort);
	public List<Monster> findByMaxageGreaterThan(Integer maxage);
	public Page<Monster> findByMaxageGreaterThan(Integer maxage, Pageable page);
	public List<Monster> findByMaxageGreaterThan(Integer maxage, Sort sort);
	public List<Monster> findByMind(Boolean mind);
	public Page<Monster> findByMind(Boolean mind, Pageable page);
	public List<Monster> findByMind(Boolean mind, Sort sort);
	public List<Monster> findByMindslime(Integer mindslime);
	public Page<Monster> findByMindslime(Integer mindslime, Pageable page);
	public List<Monster> findByMindslime(Integer mindslime, Sort sort);
	public List<Monster> findByMindslimeLessThan(Integer mindslime);
	public Page<Monster> findByMindslimeLessThan(Integer mindslime, Pageable page);
	public List<Monster> findByMindslimeLessThan(Integer mindslime, Sort sort);
	public List<Monster> findByMindslimeGreaterThan(Integer mindslime);
	public Page<Monster> findByMindslimeGreaterThan(Integer mindslime, Pageable page);
	public List<Monster> findByMindslimeGreaterThan(Integer mindslime, Sort sort);
	public List<Monster> findByMindvessel(Boolean mindvessel);
	public Page<Monster> findByMindvessel(Boolean mindvessel, Pageable page);
	public List<Monster> findByMindvessel(Boolean mindvessel, Sort sort);
	public List<Monster> findByMinsizeleader(Integer minsizeleader);
	public Page<Monster> findByMinsizeleader(Integer minsizeleader, Pageable page);
	public List<Monster> findByMinsizeleader(Integer minsizeleader, Sort sort);
	public List<Monster> findByMinsizeleaderLessThan(Integer minsizeleader);
	public Page<Monster> findByMinsizeleaderLessThan(Integer minsizeleader, Pageable page);
	public List<Monster> findByMinsizeleaderLessThan(Integer minsizeleader, Sort sort);
	public List<Monster> findByMinsizeleaderGreaterThan(Integer minsizeleader);
	public Page<Monster> findByMinsizeleaderGreaterThan(Integer minsizeleader, Pageable page);
	public List<Monster> findByMinsizeleaderGreaterThan(Integer minsizeleader, Sort sort);
	public List<Monster> findByMisc(Integer misc);
	public Page<Monster> findByMisc(Integer misc, Pageable page);
	public List<Monster> findByMisc(Integer misc, Sort sort);
	public List<Monster> findByMiscLessThan(Integer misc);
	public Page<Monster> findByMiscLessThan(Integer misc, Pageable page);
	public List<Monster> findByMiscLessThan(Integer misc, Sort sort);
	public List<Monster> findByMiscGreaterThan(Integer misc);
	public Page<Monster> findByMiscGreaterThan(Integer misc, Pageable page);
	public List<Monster> findByMiscGreaterThan(Integer misc, Sort sort);
	public List<Monster> findByMor(Integer mor);
	public Page<Monster> findByMor(Integer mor, Pageable page);
	public List<Monster> findByMor(Integer mor, Sort sort);
	public List<Monster> findByMorLessThan(Integer mor);
	public Page<Monster> findByMorLessThan(Integer mor, Pageable page);
	public List<Monster> findByMorLessThan(Integer mor, Sort sort);
	public List<Monster> findByMorGreaterThan(Integer mor);
	public Page<Monster> findByMorGreaterThan(Integer mor, Pageable page);
	public List<Monster> findByMorGreaterThan(Integer mor, Sort sort);
	public List<Monster> findByMountainsurvival(Boolean mountainsurvival);
	public Page<Monster> findByMountainsurvival(Boolean mountainsurvival, Pageable page);
	public List<Monster> findByMountainsurvival(Boolean mountainsurvival, Sort sort);
	public List<Monster> findByMounted(Boolean mounted);
	public Page<Monster> findByMounted(Boolean mounted, Pageable page);
	public List<Monster> findByMounted(Boolean mounted, Sort sort);
	public List<Monster> findByMr(Integer mr);
	public Page<Monster> findByMr(Integer mr, Pageable page);
	public List<Monster> findByMr(Integer mr, Sort sort);
	public List<Monster> findByMrLessThan(Integer mr);
	public Page<Monster> findByMrLessThan(Integer mr, Pageable page);
	public List<Monster> findByMrLessThan(Integer mr, Sort sort);
	public List<Monster> findByMrGreaterThan(Integer mr);
	public Page<Monster> findByMrGreaterThan(Integer mr, Pageable page);
	public List<Monster> findByMrGreaterThan(Integer mr, Sort sort);
	public List<Monster> findByMummification(Integer mummification);
	public Page<Monster> findByMummification(Integer mummification, Pageable page);
	public List<Monster> findByMummification(Integer mummification, Sort sort);
	public List<Monster> findByMummificationLessThan(Integer mummification);
	public Page<Monster> findByMummificationLessThan(Integer mummification, Pageable page);
	public List<Monster> findByMummificationLessThan(Integer mummification, Sort sort);
	public List<Monster> findByMummificationGreaterThan(Integer mummification);
	public Page<Monster> findByMummificationGreaterThan(Integer mummification, Pageable page);
	public List<Monster> findByMummificationGreaterThan(Integer mummification, Sort sort);
	public List<Monster> findByMummify(Integer mummify);
	public Page<Monster> findByMummify(Integer mummify, Pageable page);
	public List<Monster> findByMummify(Integer mummify, Sort sort);
	public List<Monster> findByMummifyLessThan(Integer mummify);
	public Page<Monster> findByMummifyLessThan(Integer mummify, Pageable page);
	public List<Monster> findByMummifyLessThan(Integer mummify, Sort sort);
	public List<Monster> findByMummifyGreaterThan(Integer mummify);
	public Page<Monster> findByMummifyGreaterThan(Integer mummify, Pageable page);
	public List<Monster> findByMummifyGreaterThan(Integer mummify, Sort sort);
	public List<Monster> findByMustfightinarena(Boolean mustfightinarena);
	public Page<Monster> findByMustfightinarena(Boolean mustfightinarena, Pageable page);
	public List<Monster> findByMustfightinarena(Boolean mustfightinarena, Sort sort);
	public List<Monster> findByN(Integer n);
	public Page<Monster> findByN(Integer n, Pageable page);
	public List<Monster> findByN(Integer n, Sort sort);
	public List<Monster> findByNLessThan(Integer n);
	public Page<Monster> findByNLessThan(Integer n, Pageable page);
	public List<Monster> findByNLessThan(Integer n, Sort sort);
	public List<Monster> findByNGreaterThan(Integer n);
	public Page<Monster> findByNGreaterThan(Integer n, Pageable page);
	public List<Monster> findByNGreaterThan(Integer n, Sort sort);
	public List<Monster> findByNAutosum(Boolean nAutosum);
	public Page<Monster> findByNAutosum(Boolean nAutosum, Pageable page);
	public List<Monster> findByNAutosum(Boolean nAutosum, Sort sort);
	public List<Monster> findByNSummon(Integer nSummon);
	public Page<Monster> findByNSummon(Integer nSummon, Pageable page);
	public List<Monster> findByNSummon(Integer nSummon, Sort sort);
	public List<Monster> findByNSummonLessThan(Integer nSummon);
	public Page<Monster> findByNSummonLessThan(Integer nSummon, Pageable page);
	public List<Monster> findByNSummonLessThan(Integer nSummon, Sort sort);
	public List<Monster> findByNSummonGreaterThan(Integer nSummon);
	public Page<Monster> findByNSummonGreaterThan(Integer nSummon, Pageable page);
	public List<Monster> findByNSummonGreaterThan(Integer nSummon, Sort sort);
	public List<Monster> findByNametype(Integer nametype);
	public Page<Monster> findByNametype(Integer nametype, Pageable page);
	public List<Monster> findByNametype(Integer nametype, Sort sort);
	public List<Monster> findByNametypeLessThan(Integer nametype);
	public Page<Monster> findByNametypeLessThan(Integer nametype, Pageable page);
	public List<Monster> findByNametypeLessThan(Integer nametype, Sort sort);
	public List<Monster> findByNametypeGreaterThan(Integer nametype);
	public Page<Monster> findByNametypeGreaterThan(Integer nametype, Pageable page);
	public List<Monster> findByNametypeGreaterThan(Integer nametype, Sort sort);
	public List<Monster> findByNatureattuned(Integer natureattuned);
	public Page<Monster> findByNatureattuned(Integer natureattuned, Pageable page);
	public List<Monster> findByNatureattuned(Integer natureattuned, Sort sort);
	public List<Monster> findByNatureattunedLessThan(Integer natureattuned);
	public Page<Monster> findByNatureattunedLessThan(Integer natureattuned, Pageable page);
	public List<Monster> findByNatureattunedLessThan(Integer natureattuned, Sort sort);
	public List<Monster> findByNatureattunedGreaterThan(Integer natureattuned);
	public Page<Monster> findByNatureattunedGreaterThan(Integer natureattuned, Pageable page);
	public List<Monster> findByNatureattunedGreaterThan(Integer natureattuned, Sort sort);
	public List<Monster> findByNaturerange(Integer naturerange);
	public Page<Monster> findByNaturerange(Integer naturerange, Pageable page);
	public List<Monster> findByNaturerange(Integer naturerange, Sort sort);
	public List<Monster> findByNaturerangeLessThan(Integer naturerange);
	public Page<Monster> findByNaturerangeLessThan(Integer naturerange, Pageable page);
	public List<Monster> findByNaturerangeLessThan(Integer naturerange, Sort sort);
	public List<Monster> findByNaturerangeGreaterThan(Integer naturerange);
	public Page<Monster> findByNaturerangeGreaterThan(Integer naturerange, Pageable page);
	public List<Monster> findByNaturerangeGreaterThan(Integer naturerange, Sort sort);
	public List<Monster> findByNbr1(Integer nbr1);
	public Page<Monster> findByNbr1(Integer nbr1, Pageable page);
	public List<Monster> findByNbr1(Integer nbr1, Sort sort);
	public List<Monster> findByNbr1LessThan(Integer nbr1);
	public Page<Monster> findByNbr1LessThan(Integer nbr1, Pageable page);
	public List<Monster> findByNbr1LessThan(Integer nbr1, Sort sort);
	public List<Monster> findByNbr1GreaterThan(Integer nbr1);
	public Page<Monster> findByNbr1GreaterThan(Integer nbr1, Pageable page);
	public List<Monster> findByNbr1GreaterThan(Integer nbr1, Sort sort);
	public List<Monster> findByNbr2(Integer nbr2);
	public Page<Monster> findByNbr2(Integer nbr2, Pageable page);
	public List<Monster> findByNbr2(Integer nbr2, Sort sort);
	public List<Monster> findByNbr2LessThan(Integer nbr2);
	public Page<Monster> findByNbr2LessThan(Integer nbr2, Pageable page);
	public List<Monster> findByNbr2LessThan(Integer nbr2, Sort sort);
	public List<Monster> findByNbr2GreaterThan(Integer nbr2);
	public Page<Monster> findByNbr2GreaterThan(Integer nbr2, Pageable page);
	public List<Monster> findByNbr2GreaterThan(Integer nbr2, Sort sort);
	public List<Monster> findByNbr3(Integer nbr3);
	public Page<Monster> findByNbr3(Integer nbr3, Pageable page);
	public List<Monster> findByNbr3(Integer nbr3, Sort sort);
	public List<Monster> findByNbr3LessThan(Integer nbr3);
	public Page<Monster> findByNbr3LessThan(Integer nbr3, Pageable page);
	public List<Monster> findByNbr3LessThan(Integer nbr3, Sort sort);
	public List<Monster> findByNbr3GreaterThan(Integer nbr3);
	public Page<Monster> findByNbr3GreaterThan(Integer nbr3, Pageable page);
	public List<Monster> findByNbr3GreaterThan(Integer nbr3, Sort sort);
	public List<Monster> findByNbr4(Integer nbr4);
	public Page<Monster> findByNbr4(Integer nbr4, Pageable page);
	public List<Monster> findByNbr4(Integer nbr4, Sort sort);
	public List<Monster> findByNbr4LessThan(Integer nbr4);
	public Page<Monster> findByNbr4LessThan(Integer nbr4, Pageable page);
	public List<Monster> findByNbr4LessThan(Integer nbr4, Sort sort);
	public List<Monster> findByNbr4GreaterThan(Integer nbr4);
	public Page<Monster> findByNbr4GreaterThan(Integer nbr4, Pageable page);
	public List<Monster> findByNbr4GreaterThan(Integer nbr4, Sort sort);
	public List<Monster> findByNbr5(Integer nbr5);
	public Page<Monster> findByNbr5(Integer nbr5, Pageable page);
	public List<Monster> findByNbr5(Integer nbr5, Sort sort);
	public List<Monster> findByNbr5LessThan(Integer nbr5);
	public Page<Monster> findByNbr5LessThan(Integer nbr5, Pageable page);
	public List<Monster> findByNbr5LessThan(Integer nbr5, Sort sort);
	public List<Monster> findByNbr5GreaterThan(Integer nbr5);
	public Page<Monster> findByNbr5GreaterThan(Integer nbr5, Pageable page);
	public List<Monster> findByNbr5GreaterThan(Integer nbr5, Sort sort);
	public List<Monster> findByNbr6(Integer nbr6);
	public Page<Monster> findByNbr6(Integer nbr6, Pageable page);
	public List<Monster> findByNbr6(Integer nbr6, Sort sort);
	public List<Monster> findByNbr6LessThan(Integer nbr6);
	public Page<Monster> findByNbr6LessThan(Integer nbr6, Pageable page);
	public List<Monster> findByNbr6LessThan(Integer nbr6, Sort sort);
	public List<Monster> findByNbr6GreaterThan(Integer nbr6);
	public Page<Monster> findByNbr6GreaterThan(Integer nbr6, Pageable page);
	public List<Monster> findByNbr6GreaterThan(Integer nbr6, Sort sort);
	public List<Monster> findByNeednoteat(Boolean neednoteat);
	public Page<Monster> findByNeednoteat(Boolean neednoteat, Pageable page);
	public List<Monster> findByNeednoteat(Boolean neednoteat, Sort sort);
	public List<Monster> findByNobadevents(Integer nobadevents);
	public Page<Monster> findByNobadevents(Integer nobadevents, Pageable page);
	public List<Monster> findByNobadevents(Integer nobadevents, Sort sort);
	public List<Monster> findByNobadeventsLessThan(Integer nobadevents);
	public Page<Monster> findByNobadeventsLessThan(Integer nobadevents, Pageable page);
	public List<Monster> findByNobadeventsLessThan(Integer nobadevents, Sort sort);
	public List<Monster> findByNobadeventsGreaterThan(Integer nobadevents);
	public Page<Monster> findByNobadeventsGreaterThan(Integer nobadevents, Pageable page);
	public List<Monster> findByNobadeventsGreaterThan(Integer nobadevents, Sort sort);
	public List<Monster> findByNoheal(Boolean noheal);
	public Page<Monster> findByNoheal(Boolean noheal, Pageable page);
	public List<Monster> findByNoheal(Boolean noheal, Sort sort);
	public List<Monster> findByNoriverpass(Boolean noriverpass);
	public Page<Monster> findByNoriverpass(Boolean noriverpass, Pageable page);
	public List<Monster> findByNoriverpass(Boolean noriverpass, Sort sort);
	public List<Monster> findByNowish(Boolean nowish);
	public Page<Monster> findByNowish(Boolean nowish, Pageable page);
	public List<Monster> findByNowish(Boolean nowish, Sort sort);
	public List<Monster> findByOnebattlespell(Integer onebattlespell);
	public Page<Monster> findByOnebattlespell(Integer onebattlespell, Pageable page);
	public List<Monster> findByOnebattlespell(Integer onebattlespell, Sort sort);
	public List<Monster> findByOnebattlespellLessThan(Integer onebattlespell);
	public Page<Monster> findByOnebattlespellLessThan(Integer onebattlespell, Pageable page);
	public List<Monster> findByOnebattlespellLessThan(Integer onebattlespell, Sort sort);
	public List<Monster> findByOnebattlespellGreaterThan(Integer onebattlespell);
	public Page<Monster> findByOnebattlespellGreaterThan(Integer onebattlespell, Pageable page);
	public List<Monster> findByOnebattlespellGreaterThan(Integer onebattlespell, Sort sort);
	public List<Monster> findByOnisummoner(Integer onisummoner);
	public Page<Monster> findByOnisummoner(Integer onisummoner, Pageable page);
	public List<Monster> findByOnisummoner(Integer onisummoner, Sort sort);
	public List<Monster> findByOnisummonerLessThan(Integer onisummoner);
	public Page<Monster> findByOnisummonerLessThan(Integer onisummoner, Pageable page);
	public List<Monster> findByOnisummonerLessThan(Integer onisummoner, Sort sort);
	public List<Monster> findByOnisummonerGreaterThan(Integer onisummoner);
	public Page<Monster> findByOnisummonerGreaterThan(Integer onisummoner, Pageable page);
	public List<Monster> findByOnisummonerGreaterThan(Integer onisummoner, Sort sort);
	public List<Monster> findByPathboost(Boolean pathboost);
	public Page<Monster> findByPathboost(Boolean pathboost, Pageable page);
	public List<Monster> findByPathboost(Boolean pathboost, Sort sort);
	public List<Monster> findByPathcost(Integer pathcost);
	public Page<Monster> findByPathcost(Integer pathcost, Pageable page);
	public List<Monster> findByPathcost(Integer pathcost, Sort sort);
	public List<Monster> findByPathcostLessThan(Integer pathcost);
	public Page<Monster> findByPathcostLessThan(Integer pathcost, Pageable page);
	public List<Monster> findByPathcostLessThan(Integer pathcost, Sort sort);
	public List<Monster> findByPathcostGreaterThan(Integer pathcost);
	public Page<Monster> findByPathcostGreaterThan(Integer pathcost, Pageable page);
	public List<Monster> findByPathcostGreaterThan(Integer pathcost, Sort sort);
	public List<Monster> findByPatience(Integer patience);
	public Page<Monster> findByPatience(Integer patience, Pageable page);
	public List<Monster> findByPatience(Integer patience, Sort sort);
	public List<Monster> findByPatienceLessThan(Integer patience);
	public Page<Monster> findByPatienceLessThan(Integer patience, Pageable page);
	public List<Monster> findByPatienceLessThan(Integer patience, Sort sort);
	public List<Monster> findByPatienceGreaterThan(Integer patience);
	public Page<Monster> findByPatienceGreaterThan(Integer patience, Pageable page);
	public List<Monster> findByPatienceGreaterThan(Integer patience, Sort sort);
	public List<Monster> findByPatrolbonus(Integer patrolbonus);
	public Page<Monster> findByPatrolbonus(Integer patrolbonus, Pageable page);
	public List<Monster> findByPatrolbonus(Integer patrolbonus, Sort sort);
	public List<Monster> findByPatrolbonusLessThan(Integer patrolbonus);
	public Page<Monster> findByPatrolbonusLessThan(Integer patrolbonus, Pageable page);
	public List<Monster> findByPatrolbonusLessThan(Integer patrolbonus, Sort sort);
	public List<Monster> findByPatrolbonusGreaterThan(Integer patrolbonus);
	public Page<Monster> findByPatrolbonusGreaterThan(Integer patrolbonus, Pageable page);
	public List<Monster> findByPatrolbonusGreaterThan(Integer patrolbonus, Sort sort);
	public List<Monster> findByPetrify(Boolean petrify);
	public Page<Monster> findByPetrify(Boolean petrify, Pageable page);
	public List<Monster> findByPetrify(Boolean petrify, Sort sort);
	public List<Monster> findByPierceres(Boolean pierceres);
	public Page<Monster> findByPierceres(Boolean pierceres, Pageable page);
	public List<Monster> findByPierceres(Boolean pierceres, Sort sort);
	public List<Monster> findByPillagebonus(Integer pillagebonus);
	public Page<Monster> findByPillagebonus(Integer pillagebonus, Pageable page);
	public List<Monster> findByPillagebonus(Integer pillagebonus, Sort sort);
	public List<Monster> findByPillagebonusLessThan(Integer pillagebonus);
	public Page<Monster> findByPillagebonusLessThan(Integer pillagebonus, Pageable page);
	public List<Monster> findByPillagebonusLessThan(Integer pillagebonus, Sort sort);
	public List<Monster> findByPillagebonusGreaterThan(Integer pillagebonus);
	public Page<Monster> findByPillagebonusGreaterThan(Integer pillagebonus, Pageable page);
	public List<Monster> findByPillagebonusGreaterThan(Integer pillagebonus, Sort sort);
	public List<Monster> findByPlainshape(Integer plainshape);
	public Page<Monster> findByPlainshape(Integer plainshape, Pageable page);
	public List<Monster> findByPlainshape(Integer plainshape, Sort sort);
	public List<Monster> findByPlainshapeLessThan(Integer plainshape);
	public Page<Monster> findByPlainshapeLessThan(Integer plainshape, Pageable page);
	public List<Monster> findByPlainshapeLessThan(Integer plainshape, Sort sort);
	public List<Monster> findByPlainshapeGreaterThan(Integer plainshape);
	public Page<Monster> findByPlainshapeGreaterThan(Integer plainshape, Pageable page);
	public List<Monster> findByPlainshapeGreaterThan(Integer plainshape, Sort sort);
	public List<Monster> findByPlant(Boolean plant);
	public Page<Monster> findByPlant(Boolean plant, Pageable page);
	public List<Monster> findByPlant(Boolean plant, Sort sort);
	public List<Monster> findByPoisoncloud(Integer poisoncloud);
	public Page<Monster> findByPoisoncloud(Integer poisoncloud, Pageable page);
	public List<Monster> findByPoisoncloud(Integer poisoncloud, Sort sort);
	public List<Monster> findByPoisoncloudLessThan(Integer poisoncloud);
	public Page<Monster> findByPoisoncloudLessThan(Integer poisoncloud, Pageable page);
	public List<Monster> findByPoisoncloudLessThan(Integer poisoncloud, Sort sort);
	public List<Monster> findByPoisoncloudGreaterThan(Integer poisoncloud);
	public Page<Monster> findByPoisoncloudGreaterThan(Integer poisoncloud, Pageable page);
	public List<Monster> findByPoisoncloudGreaterThan(Integer poisoncloud, Sort sort);
	public List<Monster> findByPoisonres(Integer poisonres);
	public Page<Monster> findByPoisonres(Integer poisonres, Pageable page);
	public List<Monster> findByPoisonres(Integer poisonres, Sort sort);
	public List<Monster> findByPoisonresLessThan(Integer poisonres);
	public Page<Monster> findByPoisonresLessThan(Integer poisonres, Pageable page);
	public List<Monster> findByPoisonresLessThan(Integer poisonres, Sort sort);
	public List<Monster> findByPoisonresGreaterThan(Integer poisonres);
	public Page<Monster> findByPoisonresGreaterThan(Integer poisonres, Pageable page);
	public List<Monster> findByPoisonresGreaterThan(Integer poisonres, Sort sort);
	public List<Monster> findByPoisonskin(Integer poisonskin);
	public Page<Monster> findByPoisonskin(Integer poisonskin, Pageable page);
	public List<Monster> findByPoisonskin(Integer poisonskin, Sort sort);
	public List<Monster> findByPoisonskinLessThan(Integer poisonskin);
	public Page<Monster> findByPoisonskinLessThan(Integer poisonskin, Pageable page);
	public List<Monster> findByPoisonskinLessThan(Integer poisonskin, Sort sort);
	public List<Monster> findByPoisonskinGreaterThan(Integer poisonskin);
	public Page<Monster> findByPoisonskinGreaterThan(Integer poisonskin, Pageable page);
	public List<Monster> findByPoisonskinGreaterThan(Integer poisonskin, Sort sort);
	public List<Monster> findByPooramphibian(Boolean pooramphibian);
	public Page<Monster> findByPooramphibian(Boolean pooramphibian, Pageable page);
	public List<Monster> findByPooramphibian(Boolean pooramphibian, Sort sort);
	public List<Monster> findByPopkill(Integer popkill);
	public Page<Monster> findByPopkill(Integer popkill, Pageable page);
	public List<Monster> findByPopkill(Integer popkill, Sort sort);
	public List<Monster> findByPopkillLessThan(Integer popkill);
	public Page<Monster> findByPopkillLessThan(Integer popkill, Pageable page);
	public List<Monster> findByPopkillLessThan(Integer popkill, Sort sort);
	public List<Monster> findByPopkillGreaterThan(Integer popkill);
	public Page<Monster> findByPopkillGreaterThan(Integer popkill, Pageable page);
	public List<Monster> findByPopkillGreaterThan(Integer popkill, Sort sort);
	public List<Monster> findByPoweroftheturningyear(Boolean poweroftheturningyear);
	public Page<Monster> findByPoweroftheturningyear(Boolean poweroftheturningyear, Pageable page);
	public List<Monster> findByPoweroftheturningyear(Boolean poweroftheturningyear, Sort sort);
	public List<Monster> findByPreanimator(Integer preanimator);
	public Page<Monster> findByPreanimator(Integer preanimator, Pageable page);
	public List<Monster> findByPreanimator(Integer preanimator, Sort sort);
	public List<Monster> findByPreanimatorLessThan(Integer preanimator);
	public Page<Monster> findByPreanimatorLessThan(Integer preanimator, Pageable page);
	public List<Monster> findByPreanimatorLessThan(Integer preanimator, Sort sort);
	public List<Monster> findByPreanimatorGreaterThan(Integer preanimator);
	public Page<Monster> findByPreanimatorGreaterThan(Integer preanimator, Pageable page);
	public List<Monster> findByPreanimatorGreaterThan(Integer preanimator, Sort sort);
	public List<Monster> findByPrec(Integer prec);
	public Page<Monster> findByPrec(Integer prec, Pageable page);
	public List<Monster> findByPrec(Integer prec, Sort sort);
	public List<Monster> findByPrecLessThan(Integer prec);
	public Page<Monster> findByPrecLessThan(Integer prec, Pageable page);
	public List<Monster> findByPrecLessThan(Integer prec, Sort sort);
	public List<Monster> findByPrecGreaterThan(Integer prec);
	public Page<Monster> findByPrecGreaterThan(Integer prec, Pageable page);
	public List<Monster> findByPrecGreaterThan(Integer prec, Sort sort);
	public List<Monster> findByProphetshape(Integer prophetshape);
	public Page<Monster> findByProphetshape(Integer prophetshape, Pageable page);
	public List<Monster> findByProphetshape(Integer prophetshape, Sort sort);
	public List<Monster> findByProphetshapeLessThan(Integer prophetshape);
	public Page<Monster> findByProphetshapeLessThan(Integer prophetshape, Pageable page);
	public List<Monster> findByProphetshapeLessThan(Integer prophetshape, Sort sort);
	public List<Monster> findByProphetshapeGreaterThan(Integer prophetshape);
	public Page<Monster> findByProphetshapeGreaterThan(Integer prophetshape, Pageable page);
	public List<Monster> findByProphetshapeGreaterThan(Integer prophetshape, Sort sort);
	public List<Monster> findByProt(Integer prot);
	public Page<Monster> findByProt(Integer prot, Pageable page);
	public List<Monster> findByProt(Integer prot, Sort sort);
	public List<Monster> findByProtLessThan(Integer prot);
	public Page<Monster> findByProtLessThan(Integer prot, Pageable page);
	public List<Monster> findByProtLessThan(Integer prot, Sort sort);
	public List<Monster> findByProtGreaterThan(Integer prot);
	public Page<Monster> findByProtGreaterThan(Integer prot, Pageable page);
	public List<Monster> findByProtGreaterThan(Integer prot, Sort sort);
	public List<Monster> findByRaiseonkill(Integer raiseonkill);
	public Page<Monster> findByRaiseonkill(Integer raiseonkill, Pageable page);
	public List<Monster> findByRaiseonkill(Integer raiseonkill, Sort sort);
	public List<Monster> findByRaiseonkillLessThan(Integer raiseonkill);
	public Page<Monster> findByRaiseonkillLessThan(Integer raiseonkill, Pageable page);
	public List<Monster> findByRaiseonkillLessThan(Integer raiseonkill, Sort sort);
	public List<Monster> findByRaiseonkillGreaterThan(Integer raiseonkill);
	public Page<Monster> findByRaiseonkillGreaterThan(Integer raiseonkill, Pageable page);
	public List<Monster> findByRaiseonkillGreaterThan(Integer raiseonkill, Sort sort);
	public List<Monster> findByRaiseshape(Integer raiseshape);
	public Page<Monster> findByRaiseshape(Integer raiseshape, Pageable page);
	public List<Monster> findByRaiseshape(Integer raiseshape, Sort sort);
	public List<Monster> findByRaiseshapeLessThan(Integer raiseshape);
	public Page<Monster> findByRaiseshapeLessThan(Integer raiseshape, Pageable page);
	public List<Monster> findByRaiseshapeLessThan(Integer raiseshape, Sort sort);
	public List<Monster> findByRaiseshapeGreaterThan(Integer raiseshape);
	public Page<Monster> findByRaiseshapeGreaterThan(Integer raiseshape, Pageable page);
	public List<Monster> findByRaiseshapeGreaterThan(Integer raiseshape, Sort sort);
	public List<Monster> findByRand1(Integer rand1);
	public Page<Monster> findByRand1(Integer rand1, Pageable page);
	public List<Monster> findByRand1(Integer rand1, Sort sort);
	public List<Monster> findByRand1LessThan(Integer rand1);
	public Page<Monster> findByRand1LessThan(Integer rand1, Pageable page);
	public List<Monster> findByRand1LessThan(Integer rand1, Sort sort);
	public List<Monster> findByRand1GreaterThan(Integer rand1);
	public Page<Monster> findByRand1GreaterThan(Integer rand1, Pageable page);
	public List<Monster> findByRand1GreaterThan(Integer rand1, Sort sort);
	public List<Monster> findByRand2(Integer rand2);
	public Page<Monster> findByRand2(Integer rand2, Pageable page);
	public List<Monster> findByRand2(Integer rand2, Sort sort);
	public List<Monster> findByRand2LessThan(Integer rand2);
	public Page<Monster> findByRand2LessThan(Integer rand2, Pageable page);
	public List<Monster> findByRand2LessThan(Integer rand2, Sort sort);
	public List<Monster> findByRand2GreaterThan(Integer rand2);
	public Page<Monster> findByRand2GreaterThan(Integer rand2, Pageable page);
	public List<Monster> findByRand2GreaterThan(Integer rand2, Sort sort);
	public List<Monster> findByRand3(Integer rand3);
	public Page<Monster> findByRand3(Integer rand3, Pageable page);
	public List<Monster> findByRand3(Integer rand3, Sort sort);
	public List<Monster> findByRand3LessThan(Integer rand3);
	public Page<Monster> findByRand3LessThan(Integer rand3, Pageable page);
	public List<Monster> findByRand3LessThan(Integer rand3, Sort sort);
	public List<Monster> findByRand3GreaterThan(Integer rand3);
	public Page<Monster> findByRand3GreaterThan(Integer rand3, Pageable page);
	public List<Monster> findByRand3GreaterThan(Integer rand3, Sort sort);
	public List<Monster> findByRand4(Integer rand4);
	public Page<Monster> findByRand4(Integer rand4, Pageable page);
	public List<Monster> findByRand4(Integer rand4, Sort sort);
	public List<Monster> findByRand4LessThan(Integer rand4);
	public Page<Monster> findByRand4LessThan(Integer rand4, Pageable page);
	public List<Monster> findByRand4LessThan(Integer rand4, Sort sort);
	public List<Monster> findByRand4GreaterThan(Integer rand4);
	public Page<Monster> findByRand4GreaterThan(Integer rand4, Pageable page);
	public List<Monster> findByRand4GreaterThan(Integer rand4, Sort sort);
	public List<Monster> findByRand5(Integer rand5);
	public Page<Monster> findByRand5(Integer rand5, Pageable page);
	public List<Monster> findByRand5(Integer rand5, Sort sort);
	public List<Monster> findByRand5LessThan(Integer rand5);
	public Page<Monster> findByRand5LessThan(Integer rand5, Pageable page);
	public List<Monster> findByRand5LessThan(Integer rand5, Sort sort);
	public List<Monster> findByRand5GreaterThan(Integer rand5);
	public Page<Monster> findByRand5GreaterThan(Integer rand5, Pageable page);
	public List<Monster> findByRand5GreaterThan(Integer rand5, Sort sort);
	public List<Monster> findByRand6(Integer rand6);
	public Page<Monster> findByRand6(Integer rand6, Pageable page);
	public List<Monster> findByRand6(Integer rand6, Sort sort);
	public List<Monster> findByRand6LessThan(Integer rand6);
	public Page<Monster> findByRand6LessThan(Integer rand6, Pageable page);
	public List<Monster> findByRand6LessThan(Integer rand6, Sort sort);
	public List<Monster> findByRand6GreaterThan(Integer rand6);
	public Page<Monster> findByRand6GreaterThan(Integer rand6, Pageable page);
	public List<Monster> findByRand6GreaterThan(Integer rand6, Sort sort);
	public List<Monster> findByRcost(Integer rcost);
	public Page<Monster> findByRcost(Integer rcost, Pageable page);
	public List<Monster> findByRcost(Integer rcost, Sort sort);
	public List<Monster> findByRcostLessThan(Integer rcost);
	public Page<Monster> findByRcostLessThan(Integer rcost, Pageable page);
	public List<Monster> findByRcostLessThan(Integer rcost, Sort sort);
	public List<Monster> findByRcostGreaterThan(Integer rcost);
	public Page<Monster> findByRcostGreaterThan(Integer rcost, Pageable page);
	public List<Monster> findByRcostGreaterThan(Integer rcost, Sort sort);
	public List<Monster> findByReanimator(Boolean reanimator);
	public Page<Monster> findByReanimator(Boolean reanimator, Pageable page);
	public List<Monster> findByReanimator(Boolean reanimator, Sort sort);
	public List<Monster> findByReanimpriest(Boolean reanimpriest);
	public Page<Monster> findByReanimpriest(Boolean reanimpriest, Pageable page);
	public List<Monster> findByReanimpriest(Boolean reanimpriest, Sort sort);
	public List<Monster> findByReclimit(Integer reclimit);
	public Page<Monster> findByReclimit(Integer reclimit, Pageable page);
	public List<Monster> findByReclimit(Integer reclimit, Sort sort);
	public List<Monster> findByReclimitLessThan(Integer reclimit);
	public Page<Monster> findByReclimitLessThan(Integer reclimit, Pageable page);
	public List<Monster> findByReclimitLessThan(Integer reclimit, Sort sort);
	public List<Monster> findByReclimitGreaterThan(Integer reclimit);
	public Page<Monster> findByReclimitGreaterThan(Integer reclimit, Pageable page);
	public List<Monster> findByReclimitGreaterThan(Integer reclimit, Sort sort);
	public List<Monster> findByReform(Boolean reform);
	public Page<Monster> findByReform(Boolean reform, Pageable page);
	public List<Monster> findByReform(Boolean reform, Sort sort);
	public List<Monster> findByRegeneration(Integer regeneration);
	public Page<Monster> findByRegeneration(Integer regeneration, Pageable page);
	public List<Monster> findByRegeneration(Integer regeneration, Sort sort);
	public List<Monster> findByRegenerationLessThan(Integer regeneration);
	public Page<Monster> findByRegenerationLessThan(Integer regeneration, Pageable page);
	public List<Monster> findByRegenerationLessThan(Integer regeneration, Sort sort);
	public List<Monster> findByRegenerationGreaterThan(Integer regeneration);
	public Page<Monster> findByRegenerationGreaterThan(Integer regeneration, Pageable page);
	public List<Monster> findByRegenerationGreaterThan(Integer regeneration, Sort sort);
	public List<Monster> findByReinc(Boolean reinc);
	public Page<Monster> findByReinc(Boolean reinc, Pageable page);
	public List<Monster> findByReinc(Boolean reinc, Sort sort);
	public List<Monster> findByReincarnation(Integer reincarnation);
	public Page<Monster> findByReincarnation(Integer reincarnation, Pageable page);
	public List<Monster> findByReincarnation(Integer reincarnation, Sort sort);
	public List<Monster> findByReincarnationLessThan(Integer reincarnation);
	public Page<Monster> findByReincarnationLessThan(Integer reincarnation, Pageable page);
	public List<Monster> findByReincarnationLessThan(Integer reincarnation, Sort sort);
	public List<Monster> findByReincarnationGreaterThan(Integer reincarnation);
	public Page<Monster> findByReincarnationGreaterThan(Integer reincarnation, Pageable page);
	public List<Monster> findByReincarnationGreaterThan(Integer reincarnation, Sort sort);
	public List<Monster> findByReinvigoration(Integer reinvigoration);
	public Page<Monster> findByReinvigoration(Integer reinvigoration, Pageable page);
	public List<Monster> findByReinvigoration(Integer reinvigoration, Sort sort);
	public List<Monster> findByReinvigorationLessThan(Integer reinvigoration);
	public Page<Monster> findByReinvigorationLessThan(Integer reinvigoration, Pageable page);
	public List<Monster> findByReinvigorationLessThan(Integer reinvigoration, Sort sort);
	public List<Monster> findByReinvigorationGreaterThan(Integer reinvigoration);
	public Page<Monster> findByReinvigorationGreaterThan(Integer reinvigoration, Pageable page);
	public List<Monster> findByReinvigorationGreaterThan(Integer reinvigoration, Sort sort);
	public List<Monster> findByRequireslabtorecruit(Boolean requireslabtorecruit);
	public Page<Monster> findByRequireslabtorecruit(Boolean requireslabtorecruit, Pageable page);
	public List<Monster> findByRequireslabtorecruit(Boolean requireslabtorecruit, Sort sort);
	public List<Monster> findByRequirestempletorecruit(Boolean requirestempletorecruit);
	public Page<Monster> findByRequirestempletorecruit(Boolean requirestempletorecruit, Pageable page);
	public List<Monster> findByRequirestempletorecruit(Boolean requirestempletorecruit, Sort sort);
	public List<Monster> findByResearchbonus(Integer researchbonus);
	public Page<Monster> findByResearchbonus(Integer researchbonus, Pageable page);
	public List<Monster> findByResearchbonus(Integer researchbonus, Sort sort);
	public List<Monster> findByResearchbonusLessThan(Integer researchbonus);
	public Page<Monster> findByResearchbonusLessThan(Integer researchbonus, Pageable page);
	public List<Monster> findByResearchbonusLessThan(Integer researchbonus, Sort sort);
	public List<Monster> findByResearchbonusGreaterThan(Integer researchbonus);
	public Page<Monster> findByResearchbonusGreaterThan(Integer researchbonus, Pageable page);
	public List<Monster> findByResearchbonusGreaterThan(Integer researchbonus, Sort sort);
	public List<Monster> findByResearchwithoutmagic(Boolean researchwithoutmagic);
	public Page<Monster> findByResearchwithoutmagic(Boolean researchwithoutmagic, Pageable page);
	public List<Monster> findByResearchwithoutmagic(Boolean researchwithoutmagic, Sort sort);
	public List<Monster> findByResources(Integer resources);
	public Page<Monster> findByResources(Integer resources, Pageable page);
	public List<Monster> findByResources(Integer resources, Sort sort);
	public List<Monster> findByResourcesLessThan(Integer resources);
	public Page<Monster> findByResourcesLessThan(Integer resources, Pageable page);
	public List<Monster> findByResourcesLessThan(Integer resources, Sort sort);
	public List<Monster> findByResourcesGreaterThan(Integer resources);
	public Page<Monster> findByResourcesGreaterThan(Integer resources, Pageable page);
	public List<Monster> findByResourcesGreaterThan(Integer resources, Sort sort);
	public List<Monster> findByRessize(Integer ressize);
	public Page<Monster> findByRessize(Integer ressize, Pageable page);
	public List<Monster> findByRessize(Integer ressize, Sort sort);
	public List<Monster> findByRessizeLessThan(Integer ressize);
	public Page<Monster> findByRessizeLessThan(Integer ressize, Pageable page);
	public List<Monster> findByRessizeLessThan(Integer ressize, Sort sort);
	public List<Monster> findByRessizeGreaterThan(Integer ressize);
	public Page<Monster> findByRessizeGreaterThan(Integer ressize, Pageable page);
	public List<Monster> findByRessizeGreaterThan(Integer ressize, Sort sort);
	public List<Monster> findByRpcost(Integer rpcost);
	public Page<Monster> findByRpcost(Integer rpcost, Pageable page);
	public List<Monster> findByRpcost(Integer rpcost, Sort sort);
	public List<Monster> findByRpcostLessThan(Integer rpcost);
	public Page<Monster> findByRpcostLessThan(Integer rpcost, Pageable page);
	public List<Monster> findByRpcostLessThan(Integer rpcost, Sort sort);
	public List<Monster> findByRpcostGreaterThan(Integer rpcost);
	public Page<Monster> findByRpcostGreaterThan(Integer rpcost, Pageable page);
	public List<Monster> findByRpcostGreaterThan(Integer rpcost, Sort sort);
	public List<Monster> findByRt(Integer rt);
	public Page<Monster> findByRt(Integer rt, Pageable page);
	public List<Monster> findByRt(Integer rt, Sort sort);
	public List<Monster> findByRtLessThan(Integer rt);
	public Page<Monster> findByRtLessThan(Integer rt, Pageable page);
	public List<Monster> findByRtLessThan(Integer rt, Sort sort);
	public List<Monster> findByRtGreaterThan(Integer rt);
	public Page<Monster> findByRtGreaterThan(Integer rt, Pageable page);
	public List<Monster> findByRtGreaterThan(Integer rt, Sort sort);
	public List<Monster> findByS(Integer s);
	public Page<Monster> findByS(Integer s, Pageable page);
	public List<Monster> findByS(Integer s, Sort sort);
	public List<Monster> findBySLessThan(Integer s);
	public Page<Monster> findBySLessThan(Integer s, Pageable page);
	public List<Monster> findBySLessThan(Integer s, Sort sort);
	public List<Monster> findBySGreaterThan(Integer s);
	public Page<Monster> findBySGreaterThan(Integer s, Pageable page);
	public List<Monster> findBySGreaterThan(Integer s, Sort sort);
	public List<Monster> findBySacr(Integer sacr);
	public Page<Monster> findBySacr(Integer sacr, Pageable page);
	public List<Monster> findBySacr(Integer sacr, Sort sort);
	public List<Monster> findBySacrLessThan(Integer sacr);
	public Page<Monster> findBySacrLessThan(Integer sacr, Pageable page);
	public List<Monster> findBySacrLessThan(Integer sacr, Sort sort);
	public List<Monster> findBySacrGreaterThan(Integer sacr);
	public Page<Monster> findBySacrGreaterThan(Integer sacr, Pageable page);
	public List<Monster> findBySacrGreaterThan(Integer sacr, Sort sort);
	public List<Monster> findBySailingmaxunitsize(Integer sailingmaxunitsize);
	public Page<Monster> findBySailingmaxunitsize(Integer sailingmaxunitsize, Pageable page);
	public List<Monster> findBySailingmaxunitsize(Integer sailingmaxunitsize, Sort sort);
	public List<Monster> findBySailingmaxunitsizeLessThan(Integer sailingmaxunitsize);
	public Page<Monster> findBySailingmaxunitsizeLessThan(Integer sailingmaxunitsize, Pageable page);
	public List<Monster> findBySailingmaxunitsizeLessThan(Integer sailingmaxunitsize, Sort sort);
	public List<Monster> findBySailingmaxunitsizeGreaterThan(Integer sailingmaxunitsize);
	public Page<Monster> findBySailingmaxunitsizeGreaterThan(Integer sailingmaxunitsize, Pageable page);
	public List<Monster> findBySailingmaxunitsizeGreaterThan(Integer sailingmaxunitsize, Sort sort);
	public List<Monster> findBySailingshipsize(Integer sailingshipsize);
	public Page<Monster> findBySailingshipsize(Integer sailingshipsize, Pageable page);
	public List<Monster> findBySailingshipsize(Integer sailingshipsize, Sort sort);
	public List<Monster> findBySailingshipsizeLessThan(Integer sailingshipsize);
	public Page<Monster> findBySailingshipsizeLessThan(Integer sailingshipsize, Pageable page);
	public List<Monster> findBySailingshipsizeLessThan(Integer sailingshipsize, Sort sort);
	public List<Monster> findBySailingshipsizeGreaterThan(Integer sailingshipsize);
	public Page<Monster> findBySailingshipsizeGreaterThan(Integer sailingshipsize, Pageable page);
	public List<Monster> findBySailingshipsizeGreaterThan(Integer sailingshipsize, Sort sort);
	public List<Monster> findBySailsize(Integer sailsize);
	public Page<Monster> findBySailsize(Integer sailsize, Pageable page);
	public List<Monster> findBySailsize(Integer sailsize, Sort sort);
	public List<Monster> findBySailsizeLessThan(Integer sailsize);
	public Page<Monster> findBySailsizeLessThan(Integer sailsize, Pageable page);
	public List<Monster> findBySailsizeLessThan(Integer sailsize, Sort sort);
	public List<Monster> findBySailsizeGreaterThan(Integer sailsize);
	public Page<Monster> findBySailsizeGreaterThan(Integer sailsize, Pageable page);
	public List<Monster> findBySailsizeGreaterThan(Integer sailsize, Sort sort);
	public List<Monster> findByScalewalls(Boolean scalewalls);
	public Page<Monster> findByScalewalls(Boolean scalewalls, Pageable page);
	public List<Monster> findByScalewalls(Boolean scalewalls, Sort sort);
	public List<Monster> findBySecondshape(Integer secondshape);
	public Page<Monster> findBySecondshape(Integer secondshape, Pageable page);
	public List<Monster> findBySecondshape(Integer secondshape, Sort sort);
	public List<Monster> findBySecondshapeLessThan(Integer secondshape);
	public Page<Monster> findBySecondshapeLessThan(Integer secondshape, Pageable page);
	public List<Monster> findBySecondshapeLessThan(Integer secondshape, Sort sort);
	public List<Monster> findBySecondshapeGreaterThan(Integer secondshape);
	public Page<Monster> findBySecondshapeGreaterThan(Integer secondshape, Pageable page);
	public List<Monster> findBySecondshapeGreaterThan(Integer secondshape, Sort sort);
	public List<Monster> findBySecondtmpshape(Integer secondtmpshape);
	public Page<Monster> findBySecondtmpshape(Integer secondtmpshape, Pageable page);
	public List<Monster> findBySecondtmpshape(Integer secondtmpshape, Sort sort);
	public List<Monster> findBySecondtmpshapeLessThan(Integer secondtmpshape);
	public Page<Monster> findBySecondtmpshapeLessThan(Integer secondtmpshape, Pageable page);
	public List<Monster> findBySecondtmpshapeLessThan(Integer secondtmpshape, Sort sort);
	public List<Monster> findBySecondtmpshapeGreaterThan(Integer secondtmpshape);
	public Page<Monster> findBySecondtmpshapeGreaterThan(Integer secondtmpshape, Pageable page);
	public List<Monster> findBySecondtmpshapeGreaterThan(Integer secondtmpshape, Sort sort);
	public List<Monster> findBySeduce(Integer seduce);
	public Page<Monster> findBySeduce(Integer seduce, Pageable page);
	public List<Monster> findBySeduce(Integer seduce, Sort sort);
	public List<Monster> findBySeduceLessThan(Integer seduce);
	public Page<Monster> findBySeduceLessThan(Integer seduce, Pageable page);
	public List<Monster> findBySeduceLessThan(Integer seduce, Sort sort);
	public List<Monster> findBySeduceGreaterThan(Integer seduce);
	public Page<Monster> findBySeduceGreaterThan(Integer seduce, Pageable page);
	public List<Monster> findBySeduceGreaterThan(Integer seduce, Sort sort);
	public List<Monster> findBySendlesserhorrormult(Integer sendlesserhorrormult);
	public Page<Monster> findBySendlesserhorrormult(Integer sendlesserhorrormult, Pageable page);
	public List<Monster> findBySendlesserhorrormult(Integer sendlesserhorrormult, Sort sort);
	public List<Monster> findBySendlesserhorrormultLessThan(Integer sendlesserhorrormult);
	public Page<Monster> findBySendlesserhorrormultLessThan(Integer sendlesserhorrormult, Pageable page);
	public List<Monster> findBySendlesserhorrormultLessThan(Integer sendlesserhorrormult, Sort sort);
	public List<Monster> findBySendlesserhorrormultGreaterThan(Integer sendlesserhorrormult);
	public Page<Monster> findBySendlesserhorrormultGreaterThan(Integer sendlesserhorrormult, Pageable page);
	public List<Monster> findBySendlesserhorrormultGreaterThan(Integer sendlesserhorrormult, Sort sort);
	public List<Monster> findByShapechange(Integer shapechange);
	public Page<Monster> findByShapechange(Integer shapechange, Pageable page);
	public List<Monster> findByShapechange(Integer shapechange, Sort sort);
	public List<Monster> findByShapechangeLessThan(Integer shapechange);
	public Page<Monster> findByShapechangeLessThan(Integer shapechange, Pageable page);
	public List<Monster> findByShapechangeLessThan(Integer shapechange, Sort sort);
	public List<Monster> findByShapechangeGreaterThan(Integer shapechange);
	public Page<Monster> findByShapechangeGreaterThan(Integer shapechange, Pageable page);
	public List<Monster> findByShapechangeGreaterThan(Integer shapechange, Sort sort);
	public List<Monster> findByShatteredsoul(Integer shatteredsoul);
	public Page<Monster> findByShatteredsoul(Integer shatteredsoul, Pageable page);
	public List<Monster> findByShatteredsoul(Integer shatteredsoul, Sort sort);
	public List<Monster> findByShatteredsoulLessThan(Integer shatteredsoul);
	public Page<Monster> findByShatteredsoulLessThan(Integer shatteredsoul, Pageable page);
	public List<Monster> findByShatteredsoulLessThan(Integer shatteredsoul, Sort sort);
	public List<Monster> findByShatteredsoulGreaterThan(Integer shatteredsoul);
	public Page<Monster> findByShatteredsoulGreaterThan(Integer shatteredsoul, Pageable page);
	public List<Monster> findByShatteredsoulGreaterThan(Integer shatteredsoul, Sort sort);
	public List<Monster> findByShockres(Integer shockres);
	public Page<Monster> findByShockres(Integer shockres, Pageable page);
	public List<Monster> findByShockres(Integer shockres, Sort sort);
	public List<Monster> findByShockresLessThan(Integer shockres);
	public Page<Monster> findByShockresLessThan(Integer shockres, Pageable page);
	public List<Monster> findByShockresLessThan(Integer shockres, Sort sort);
	public List<Monster> findByShockresGreaterThan(Integer shockres);
	public Page<Monster> findByShockresGreaterThan(Integer shockres, Pageable page);
	public List<Monster> findByShockresGreaterThan(Integer shockres, Sort sort);
	public List<Monster> findByShrinkhp(Integer shrinkhp);
	public Page<Monster> findByShrinkhp(Integer shrinkhp, Pageable page);
	public List<Monster> findByShrinkhp(Integer shrinkhp, Sort sort);
	public List<Monster> findByShrinkhpLessThan(Integer shrinkhp);
	public Page<Monster> findByShrinkhpLessThan(Integer shrinkhp, Pageable page);
	public List<Monster> findByShrinkhpLessThan(Integer shrinkhp, Sort sort);
	public List<Monster> findByShrinkhpGreaterThan(Integer shrinkhp);
	public Page<Monster> findByShrinkhpGreaterThan(Integer shrinkhp, Pageable page);
	public List<Monster> findByShrinkhpGreaterThan(Integer shrinkhp, Sort sort);
	public List<Monster> findBySiegebonus(Integer siegebonus);
	public Page<Monster> findBySiegebonus(Integer siegebonus, Pageable page);
	public List<Monster> findBySiegebonus(Integer siegebonus, Sort sort);
	public List<Monster> findBySiegebonusLessThan(Integer siegebonus);
	public Page<Monster> findBySiegebonusLessThan(Integer siegebonus, Pageable page);
	public List<Monster> findBySiegebonusLessThan(Integer siegebonus, Sort sort);
	public List<Monster> findBySiegebonusGreaterThan(Integer siegebonus);
	public Page<Monster> findBySiegebonusGreaterThan(Integer siegebonus, Pageable page);
	public List<Monster> findBySiegebonusGreaterThan(Integer siegebonus, Sort sort);
	public List<Monster> findBySize(Integer size);
	public Page<Monster> findBySize(Integer size, Pageable page);
	public List<Monster> findBySize(Integer size, Sort sort);
	public List<Monster> findBySizeLessThan(Integer size);
	public Page<Monster> findBySizeLessThan(Integer size, Pageable page);
	public List<Monster> findBySizeLessThan(Integer size, Sort sort);
	public List<Monster> findBySizeGreaterThan(Integer size);
	public Page<Monster> findBySizeGreaterThan(Integer size, Pageable page);
	public List<Monster> findBySizeGreaterThan(Integer size, Sort sort);
	public List<Monster> findBySlashres(Boolean slashres);
	public Page<Monster> findBySlashres(Boolean slashres, Pageable page);
	public List<Monster> findBySlashres(Boolean slashres, Sort sort);
	public List<Monster> findBySlave(Integer slave);
	public Page<Monster> findBySlave(Integer slave, Pageable page);
	public List<Monster> findBySlave(Integer slave, Sort sort);
	public List<Monster> findBySlaveLessThan(Integer slave);
	public Page<Monster> findBySlaveLessThan(Integer slave, Pageable page);
	public List<Monster> findBySlaveLessThan(Integer slave, Sort sort);
	public List<Monster> findBySlaveGreaterThan(Integer slave);
	public Page<Monster> findBySlaveGreaterThan(Integer slave, Pageable page);
	public List<Monster> findBySlaveGreaterThan(Integer slave, Sort sort);
	public List<Monster> findBySleepaura(Integer sleepaura);
	public Page<Monster> findBySleepaura(Integer sleepaura, Pageable page);
	public List<Monster> findBySleepaura(Integer sleepaura, Sort sort);
	public List<Monster> findBySleepauraLessThan(Integer sleepaura);
	public Page<Monster> findBySleepauraLessThan(Integer sleepaura, Pageable page);
	public List<Monster> findBySleepauraLessThan(Integer sleepaura, Sort sort);
	public List<Monster> findBySleepauraGreaterThan(Integer sleepaura);
	public Page<Monster> findBySleepauraGreaterThan(Integer sleepaura, Pageable page);
	public List<Monster> findBySleepauraGreaterThan(Integer sleepaura, Sort sort);
	public List<Monster> findBySlimer(Integer slimer);
	public Page<Monster> findBySlimer(Integer slimer, Pageable page);
	public List<Monster> findBySlimer(Integer slimer, Sort sort);
	public List<Monster> findBySlimerLessThan(Integer slimer);
	public Page<Monster> findBySlimerLessThan(Integer slimer, Pageable page);
	public List<Monster> findBySlimerLessThan(Integer slimer, Sort sort);
	public List<Monster> findBySlimerGreaterThan(Integer slimer);
	public Page<Monster> findBySlimerGreaterThan(Integer slimer, Pageable page);
	public List<Monster> findBySlimerGreaterThan(Integer slimer, Sort sort);
	public List<Monster> findBySlothresearch(Integer slothresearch);
	public Page<Monster> findBySlothresearch(Integer slothresearch, Pageable page);
	public List<Monster> findBySlothresearch(Integer slothresearch, Sort sort);
	public List<Monster> findBySlothresearchLessThan(Integer slothresearch);
	public Page<Monster> findBySlothresearchLessThan(Integer slothresearch, Pageable page);
	public List<Monster> findBySlothresearchLessThan(Integer slothresearch, Sort sort);
	public List<Monster> findBySlothresearchGreaterThan(Integer slothresearch);
	public Page<Monster> findBySlothresearchGreaterThan(Integer slothresearch, Pageable page);
	public List<Monster> findBySlothresearchGreaterThan(Integer slothresearch, Sort sort);
	public List<Monster> findBySnaketattoo(Integer snaketattoo);
	public Page<Monster> findBySnaketattoo(Integer snaketattoo, Pageable page);
	public List<Monster> findBySnaketattoo(Integer snaketattoo, Sort sort);
	public List<Monster> findBySnaketattooLessThan(Integer snaketattoo);
	public Page<Monster> findBySnaketattooLessThan(Integer snaketattoo, Pageable page);
	public List<Monster> findBySnaketattooLessThan(Integer snaketattoo, Sort sort);
	public List<Monster> findBySnaketattooGreaterThan(Integer snaketattoo);
	public Page<Monster> findBySnaketattooGreaterThan(Integer snaketattoo, Pageable page);
	public List<Monster> findBySnaketattooGreaterThan(Integer snaketattoo, Sort sort);
	public List<Monster> findBySnowmove(Boolean snowmove);
	public Page<Monster> findBySnowmove(Boolean snowmove, Pageable page);
	public List<Monster> findBySnowmove(Boolean snowmove, Sort sort);
	public List<Monster> findBySorceryrange(Integer sorceryrange);
	public Page<Monster> findBySorceryrange(Integer sorceryrange, Pageable page);
	public List<Monster> findBySorceryrange(Integer sorceryrange, Sort sort);
	public List<Monster> findBySorceryrangeLessThan(Integer sorceryrange);
	public Page<Monster> findBySorceryrangeLessThan(Integer sorceryrange, Pageable page);
	public List<Monster> findBySorceryrangeLessThan(Integer sorceryrange, Sort sort);
	public List<Monster> findBySorceryrangeGreaterThan(Integer sorceryrange);
	public Page<Monster> findBySorceryrangeGreaterThan(Integer sorceryrange, Pageable page);
	public List<Monster> findBySorceryrangeGreaterThan(Integer sorceryrange, Sort sort);
	public List<Monster> findBySpecial(Boolean special);
	public Page<Monster> findBySpecial(Boolean special, Pageable page);
	public List<Monster> findBySpecial(Boolean special, Sort sort);
	public List<Monster> findBySpeciallook(Integer speciallook);
	public Page<Monster> findBySpeciallook(Integer speciallook, Pageable page);
	public List<Monster> findBySpeciallook(Integer speciallook, Sort sort);
	public List<Monster> findBySpeciallookLessThan(Integer speciallook);
	public Page<Monster> findBySpeciallookLessThan(Integer speciallook, Pageable page);
	public List<Monster> findBySpeciallookLessThan(Integer speciallook, Sort sort);
	public List<Monster> findBySpeciallookGreaterThan(Integer speciallook);
	public Page<Monster> findBySpeciallookGreaterThan(Integer speciallook, Pageable page);
	public List<Monster> findBySpeciallookGreaterThan(Integer speciallook, Sort sort);
	public List<Monster> findBySpellsinging(Boolean spellsinging);
	public Page<Monster> findBySpellsinging(Boolean spellsinging, Pageable page);
	public List<Monster> findBySpellsinging(Boolean spellsinging, Sort sort);
	public List<Monster> findBySpiritsight(Boolean spiritsight);
	public Page<Monster> findBySpiritsight(Boolean spiritsight, Pageable page);
	public List<Monster> findBySpiritsight(Boolean spiritsight, Sort sort);
	public List<Monster> findBySpreadchaos(Boolean spreadchaos);
	public Page<Monster> findBySpreadchaos(Boolean spreadchaos, Pageable page);
	public List<Monster> findBySpreadchaos(Boolean spreadchaos, Sort sort);
	public List<Monster> findBySpreaddeath(Boolean spreaddeath);
	public Page<Monster> findBySpreaddeath(Boolean spreaddeath, Pageable page);
	public List<Monster> findBySpreaddeath(Boolean spreaddeath, Sort sort);
	public List<Monster> findBySpreaddom(Boolean spreaddom);
	public Page<Monster> findBySpreaddom(Boolean spreaddom, Pageable page);
	public List<Monster> findBySpreaddom(Boolean spreaddom, Sort sort);
	public List<Monster> findBySpreadgrowth(Boolean spreadgrowth);
	public Page<Monster> findBySpreadgrowth(Boolean spreadgrowth, Pageable page);
	public List<Monster> findBySpreadgrowth(Boolean spreadgrowth, Sort sort);
	public List<Monster> findBySpreadorder(Boolean spreadorder);
	public Page<Monster> findBySpreadorder(Boolean spreadorder, Pageable page);
	public List<Monster> findBySpreadorder(Boolean spreadorder, Sort sort);
	public List<Monster> findBySpringpower(Integer springpower);
	public Page<Monster> findBySpringpower(Integer springpower, Pageable page);
	public List<Monster> findBySpringpower(Integer springpower, Sort sort);
	public List<Monster> findBySpringpowerLessThan(Integer springpower);
	public Page<Monster> findBySpringpowerLessThan(Integer springpower, Pageable page);
	public List<Monster> findBySpringpowerLessThan(Integer springpower, Sort sort);
	public List<Monster> findBySpringpowerGreaterThan(Integer springpower);
	public Page<Monster> findBySpringpowerGreaterThan(Integer springpower, Pageable page);
	public List<Monster> findBySpringpowerGreaterThan(Integer springpower, Sort sort);
	public List<Monster> findBySpy(Boolean spy);
	public Page<Monster> findBySpy(Boolean spy, Pageable page);
	public List<Monster> findBySpy(Boolean spy, Sort sort);
	public List<Monster> findByStandard(Boolean standard);
	public Page<Monster> findByStandard(Boolean standard, Pageable page);
	public List<Monster> findByStandard(Boolean standard, Sort sort);
	public List<Monster> findByStartaff(Boolean startaff);
	public Page<Monster> findByStartaff(Boolean startaff, Pageable page);
	public List<Monster> findByStartaff(Boolean startaff, Sort sort);
	public List<Monster> findByStartaffliction(Integer startaffliction);
	public Page<Monster> findByStartaffliction(Integer startaffliction, Pageable page);
	public List<Monster> findByStartaffliction(Integer startaffliction, Sort sort);
	public List<Monster> findByStartafflictionLessThan(Integer startaffliction);
	public Page<Monster> findByStartafflictionLessThan(Integer startaffliction, Pageable page);
	public List<Monster> findByStartafflictionLessThan(Integer startaffliction, Sort sort);
	public List<Monster> findByStartafflictionGreaterThan(Integer startaffliction);
	public Page<Monster> findByStartafflictionGreaterThan(Integer startaffliction, Pageable page);
	public List<Monster> findByStartafflictionGreaterThan(Integer startaffliction, Sort sort);
	public List<Monster> findByStartage(Integer startage);
	public Page<Monster> findByStartage(Integer startage, Pageable page);
	public List<Monster> findByStartage(Integer startage, Sort sort);
	public List<Monster> findByStartageLessThan(Integer startage);
	public Page<Monster> findByStartageLessThan(Integer startage, Pageable page);
	public List<Monster> findByStartageLessThan(Integer startage, Sort sort);
	public List<Monster> findByStartageGreaterThan(Integer startage);
	public Page<Monster> findByStartageGreaterThan(Integer startage, Pageable page);
	public List<Monster> findByStartageGreaterThan(Integer startage, Sort sort);
	public List<Monster> findByStartagemodifier(Integer startagemodifier);
	public Page<Monster> findByStartagemodifier(Integer startagemodifier, Pageable page);
	public List<Monster> findByStartagemodifier(Integer startagemodifier, Sort sort);
	public List<Monster> findByStartagemodifierLessThan(Integer startagemodifier);
	public Page<Monster> findByStartagemodifierLessThan(Integer startagemodifier, Pageable page);
	public List<Monster> findByStartagemodifierLessThan(Integer startagemodifier, Sort sort);
	public List<Monster> findByStartagemodifierGreaterThan(Integer startagemodifier);
	public Page<Monster> findByStartagemodifierGreaterThan(Integer startagemodifier, Pageable page);
	public List<Monster> findByStartagemodifierGreaterThan(Integer startagemodifier, Sort sort);
	public List<Monster> findByStartdom(Integer startdom);
	public Page<Monster> findByStartdom(Integer startdom, Pageable page);
	public List<Monster> findByStartdom(Integer startdom, Sort sort);
	public List<Monster> findByStartdomLessThan(Integer startdom);
	public Page<Monster> findByStartdomLessThan(Integer startdom, Pageable page);
	public List<Monster> findByStartdomLessThan(Integer startdom, Sort sort);
	public List<Monster> findByStartdomGreaterThan(Integer startdom);
	public Page<Monster> findByStartdomGreaterThan(Integer startdom, Pageable page);
	public List<Monster> findByStartdomGreaterThan(Integer startdom, Sort sort);
	public List<Monster> findByStartingaff(Integer startingaff);
	public Page<Monster> findByStartingaff(Integer startingaff, Pageable page);
	public List<Monster> findByStartingaff(Integer startingaff, Sort sort);
	public List<Monster> findByStartingaffLessThan(Integer startingaff);
	public Page<Monster> findByStartingaffLessThan(Integer startingaff, Pageable page);
	public List<Monster> findByStartingaffLessThan(Integer startingaff, Sort sort);
	public List<Monster> findByStartingaffGreaterThan(Integer startingaff);
	public Page<Monster> findByStartingaffGreaterThan(Integer startingaff, Pageable page);
	public List<Monster> findByStartingaffGreaterThan(Integer startingaff, Sort sort);
	public List<Monster> findByStartitem(Boolean startitem);
	public Page<Monster> findByStartitem(Boolean startitem, Pageable page);
	public List<Monster> findByStartitem(Boolean startitem, Sort sort);
	public List<Monster> findByStealthy(Integer stealthy);
	public Page<Monster> findByStealthy(Integer stealthy, Pageable page);
	public List<Monster> findByStealthy(Integer stealthy, Sort sort);
	public List<Monster> findByStealthyLessThan(Integer stealthy);
	public Page<Monster> findByStealthyLessThan(Integer stealthy, Pageable page);
	public List<Monster> findByStealthyLessThan(Integer stealthy, Sort sort);
	public List<Monster> findByStealthyGreaterThan(Integer stealthy);
	public Page<Monster> findByStealthyGreaterThan(Integer stealthy, Pageable page);
	public List<Monster> findByStealthyGreaterThan(Integer stealthy, Sort sort);
	public List<Monster> findByStonebeing(Boolean stonebeing);
	public Page<Monster> findByStonebeing(Boolean stonebeing, Pageable page);
	public List<Monster> findByStonebeing(Boolean stonebeing, Sort sort);
	public List<Monster> findByStormimmune(Boolean stormimmune);
	public Page<Monster> findByStormimmune(Boolean stormimmune, Pageable page);
	public List<Monster> findByStormimmune(Boolean stormimmune, Sort sort);
	public List<Monster> findByStormpower(Integer stormpower);
	public Page<Monster> findByStormpower(Integer stormpower, Pageable page);
	public List<Monster> findByStormpower(Integer stormpower, Sort sort);
	public List<Monster> findByStormpowerLessThan(Integer stormpower);
	public Page<Monster> findByStormpowerLessThan(Integer stormpower, Pageable page);
	public List<Monster> findByStormpowerLessThan(Integer stormpower, Sort sort);
	public List<Monster> findByStormpowerGreaterThan(Integer stormpower);
	public Page<Monster> findByStormpowerGreaterThan(Integer stormpower, Pageable page);
	public List<Monster> findByStormpowerGreaterThan(Integer stormpower, Sort sort);
	public List<Monster> findByStr(Integer str);
	public Page<Monster> findByStr(Integer str, Pageable page);
	public List<Monster> findByStr(Integer str, Sort sort);
	public List<Monster> findByStrLessThan(Integer str);
	public Page<Monster> findByStrLessThan(Integer str, Pageable page);
	public List<Monster> findByStrLessThan(Integer str, Sort sort);
	public List<Monster> findByStrGreaterThan(Integer str);
	public Page<Monster> findByStrGreaterThan(Integer str, Pageable page);
	public List<Monster> findByStrGreaterThan(Integer str, Sort sort);
	public List<Monster> findByStunimmunity(Boolean stunimmunity);
	public Page<Monster> findByStunimmunity(Boolean stunimmunity, Pageable page);
	public List<Monster> findByStunimmunity(Boolean stunimmunity, Sort sort);
	public List<Monster> findByStupid(Boolean stupid);
	public Page<Monster> findByStupid(Boolean stupid, Pageable page);
	public List<Monster> findByStupid(Boolean stupid, Sort sort);
	public List<Monster> findBySuccubus(Integer succubus);
	public Page<Monster> findBySuccubus(Integer succubus, Pageable page);
	public List<Monster> findBySuccubus(Integer succubus, Sort sort);
	public List<Monster> findBySuccubusLessThan(Integer succubus);
	public Page<Monster> findBySuccubusLessThan(Integer succubus, Pageable page);
	public List<Monster> findBySuccubusLessThan(Integer succubus, Sort sort);
	public List<Monster> findBySuccubusGreaterThan(Integer succubus);
	public Page<Monster> findBySuccubusGreaterThan(Integer succubus, Pageable page);
	public List<Monster> findBySuccubusGreaterThan(Integer succubus, Sort sort);
	public List<Monster> findBySummerpower(Integer summerpower);
	public Page<Monster> findBySummerpower(Integer summerpower, Pageable page);
	public List<Monster> findBySummerpower(Integer summerpower, Sort sort);
	public List<Monster> findBySummerpowerLessThan(Integer summerpower);
	public Page<Monster> findBySummerpowerLessThan(Integer summerpower, Pageable page);
	public List<Monster> findBySummerpowerLessThan(Integer summerpower, Sort sort);
	public List<Monster> findBySummerpowerGreaterThan(Integer summerpower);
	public Page<Monster> findBySummerpowerGreaterThan(Integer summerpower, Pageable page);
	public List<Monster> findBySummerpowerGreaterThan(Integer summerpower, Sort sort);
	public List<Monster> findBySummon(Integer summon);
	public Page<Monster> findBySummon(Integer summon, Pageable page);
	public List<Monster> findBySummon(Integer summon, Sort sort);
	public List<Monster> findBySummonLessThan(Integer summon);
	public Page<Monster> findBySummonLessThan(Integer summon, Pageable page);
	public List<Monster> findBySummonLessThan(Integer summon, Sort sort);
	public List<Monster> findBySummonGreaterThan(Integer summon);
	public Page<Monster> findBySummonGreaterThan(Integer summon, Pageable page);
	public List<Monster> findBySummonGreaterThan(Integer summon, Sort sort);
	public List<Monster> findBySummon5(Integer summon5);
	public Page<Monster> findBySummon5(Integer summon5, Pageable page);
	public List<Monster> findBySummon5(Integer summon5, Sort sort);
	public List<Monster> findBySummon5LessThan(Integer summon5);
	public Page<Monster> findBySummon5LessThan(Integer summon5, Pageable page);
	public List<Monster> findBySummon5LessThan(Integer summon5, Sort sort);
	public List<Monster> findBySummon5GreaterThan(Integer summon5);
	public Page<Monster> findBySummon5GreaterThan(Integer summon5, Pageable page);
	public List<Monster> findBySummon5GreaterThan(Integer summon5, Sort sort);
	public List<Monster> findBySunawe(Integer sunawe);
	public Page<Monster> findBySunawe(Integer sunawe, Pageable page);
	public List<Monster> findBySunawe(Integer sunawe, Sort sort);
	public List<Monster> findBySunaweLessThan(Integer sunawe);
	public Page<Monster> findBySunaweLessThan(Integer sunawe, Pageable page);
	public List<Monster> findBySunaweLessThan(Integer sunawe, Sort sort);
	public List<Monster> findBySunaweGreaterThan(Integer sunawe);
	public Page<Monster> findBySunaweGreaterThan(Integer sunawe, Pageable page);
	public List<Monster> findBySunaweGreaterThan(Integer sunawe, Sort sort);
	public List<Monster> findBySupplybonus(Integer supplybonus);
	public Page<Monster> findBySupplybonus(Integer supplybonus, Pageable page);
	public List<Monster> findBySupplybonus(Integer supplybonus, Sort sort);
	public List<Monster> findBySupplybonusLessThan(Integer supplybonus);
	public Page<Monster> findBySupplybonusLessThan(Integer supplybonus, Pageable page);
	public List<Monster> findBySupplybonusLessThan(Integer supplybonus, Sort sort);
	public List<Monster> findBySupplybonusGreaterThan(Integer supplybonus);
	public Page<Monster> findBySupplybonusGreaterThan(Integer supplybonus, Pageable page);
	public List<Monster> findBySupplybonusGreaterThan(Integer supplybonus, Sort sort);
	public List<Monster> findBySupplysize(Integer supplysize);
	public Page<Monster> findBySupplysize(Integer supplysize, Pageable page);
	public List<Monster> findBySupplysize(Integer supplysize, Sort sort);
	public List<Monster> findBySupplysizeLessThan(Integer supplysize);
	public Page<Monster> findBySupplysizeLessThan(Integer supplysize, Pageable page);
	public List<Monster> findBySupplysizeLessThan(Integer supplysize, Sort sort);
	public List<Monster> findBySupplysizeGreaterThan(Integer supplysize);
	public Page<Monster> findBySupplysizeGreaterThan(Integer supplysize, Pageable page);
	public List<Monster> findBySupplysizeGreaterThan(Integer supplysize, Sort sort);
	public List<Monster> findBySwampsurvival(Boolean swampsurvival);
	public Page<Monster> findBySwampsurvival(Boolean swampsurvival, Pageable page);
	public List<Monster> findBySwampsurvival(Boolean swampsurvival, Sort sort);
	public List<Monster> findBySwarmbody(Integer swarmbody);
	public Page<Monster> findBySwarmbody(Integer swarmbody, Pageable page);
	public List<Monster> findBySwarmbody(Integer swarmbody, Sort sort);
	public List<Monster> findBySwarmbodyLessThan(Integer swarmbody);
	public Page<Monster> findBySwarmbodyLessThan(Integer swarmbody, Pageable page);
	public List<Monster> findBySwarmbodyLessThan(Integer swarmbody, Sort sort);
	public List<Monster> findBySwarmbodyGreaterThan(Integer swarmbody);
	public Page<Monster> findBySwarmbodyGreaterThan(Integer swarmbody, Pageable page);
	public List<Monster> findBySwarmbodyGreaterThan(Integer swarmbody, Sort sort);
	public List<Monster> findBySwimming(Boolean swimming);
	public Page<Monster> findBySwimming(Boolean swimming, Pageable page);
	public List<Monster> findBySwimming(Boolean swimming, Sort sort);
	public List<Monster> findByTaskmaster(Integer taskmaster);
	public Page<Monster> findByTaskmaster(Integer taskmaster, Pageable page);
	public List<Monster> findByTaskmaster(Integer taskmaster, Sort sort);
	public List<Monster> findByTaskmasterLessThan(Integer taskmaster);
	public Page<Monster> findByTaskmasterLessThan(Integer taskmaster, Pageable page);
	public List<Monster> findByTaskmasterLessThan(Integer taskmaster, Sort sort);
	public List<Monster> findByTaskmasterGreaterThan(Integer taskmaster);
	public Page<Monster> findByTaskmasterGreaterThan(Integer taskmaster, Pageable page);
	public List<Monster> findByTaskmasterGreaterThan(Integer taskmaster, Sort sort);
	public List<Monster> findByTaxcollector(Boolean taxcollector);
	public Page<Monster> findByTaxcollector(Boolean taxcollector, Pageable page);
	public List<Monster> findByTaxcollector(Boolean taxcollector, Sort sort);
	public List<Monster> findByTeleport(Boolean teleport);
	public Page<Monster> findByTeleport(Boolean teleport, Pageable page);
	public List<Monster> findByTeleport(Boolean teleport, Sort sort);
	public List<Monster> findByTemplesummon(Integer templesummon);
	public Page<Monster> findByTemplesummon(Integer templesummon, Pageable page);
	public List<Monster> findByTemplesummon(Integer templesummon, Sort sort);
	public List<Monster> findByTemplesummonLessThan(Integer templesummon);
	public Page<Monster> findByTemplesummonLessThan(Integer templesummon, Pageable page);
	public List<Monster> findByTemplesummonLessThan(Integer templesummon, Sort sort);
	public List<Monster> findByTemplesummonGreaterThan(Integer templesummon);
	public Page<Monster> findByTemplesummonGreaterThan(Integer templesummon, Pageable page);
	public List<Monster> findByTemplesummonGreaterThan(Integer templesummon, Sort sort);
	public List<Monster> findByTheftofthesunawe(Boolean theftofthesunawe);
	public Page<Monster> findByTheftofthesunawe(Boolean theftofthesunawe, Pageable page);
	public List<Monster> findByTheftofthesunawe(Boolean theftofthesunawe, Sort sort);
	public List<Monster> findByThronekill(Integer thronekill);
	public Page<Monster> findByThronekill(Integer thronekill, Pageable page);
	public List<Monster> findByThronekill(Integer thronekill, Sort sort);
	public List<Monster> findByThronekillLessThan(Integer thronekill);
	public Page<Monster> findByThronekillLessThan(Integer thronekill, Pageable page);
	public List<Monster> findByThronekillLessThan(Integer thronekill, Sort sort);
	public List<Monster> findByThronekillGreaterThan(Integer thronekill);
	public Page<Monster> findByThronekillGreaterThan(Integer thronekill, Pageable page);
	public List<Monster> findByThronekillGreaterThan(Integer thronekill, Sort sort);
	public List<Monster> findByTrample(Boolean trample);
	public Page<Monster> findByTrample(Boolean trample, Pageable page);
	public List<Monster> findByTrample(Boolean trample, Sort sort);
	public List<Monster> findByTrampswallow(Boolean trampswallow);
	public Page<Monster> findByTrampswallow(Boolean trampswallow, Pageable page);
	public List<Monster> findByTrampswallow(Boolean trampswallow, Sort sort);
	public List<Monster> findByTransformation(Integer transformation);
	public Page<Monster> findByTransformation(Integer transformation, Pageable page);
	public List<Monster> findByTransformation(Integer transformation, Sort sort);
	public List<Monster> findByTransformationLessThan(Integer transformation);
	public Page<Monster> findByTransformationLessThan(Integer transformation, Pageable page);
	public List<Monster> findByTransformationLessThan(Integer transformation, Sort sort);
	public List<Monster> findByTransformationGreaterThan(Integer transformation);
	public Page<Monster> findByTransformationGreaterThan(Integer transformation, Pageable page);
	public List<Monster> findByTransformationGreaterThan(Integer transformation, Sort sort);
	public List<Monster> findByTriple3mon(Boolean triple3mon);
	public Page<Monster> findByTriple3mon(Boolean triple3mon, Pageable page);
	public List<Monster> findByTriple3mon(Boolean triple3mon, Sort sort);
	public List<Monster> findByTriplegod(Integer triplegod);
	public Page<Monster> findByTriplegod(Integer triplegod, Pageable page);
	public List<Monster> findByTriplegod(Integer triplegod, Sort sort);
	public List<Monster> findByTriplegodLessThan(Integer triplegod);
	public Page<Monster> findByTriplegodLessThan(Integer triplegod, Pageable page);
	public List<Monster> findByTriplegodLessThan(Integer triplegod, Sort sort);
	public List<Monster> findByTriplegodGreaterThan(Integer triplegod);
	public Page<Monster> findByTriplegodGreaterThan(Integer triplegod, Pageable page);
	public List<Monster> findByTriplegodGreaterThan(Integer triplegod, Sort sort);
	public List<Monster> findByTriplegodmag(Integer triplegodmag);
	public Page<Monster> findByTriplegodmag(Integer triplegodmag, Pageable page);
	public List<Monster> findByTriplegodmag(Integer triplegodmag, Sort sort);
	public List<Monster> findByTriplegodmagLessThan(Integer triplegodmag);
	public Page<Monster> findByTriplegodmagLessThan(Integer triplegodmag, Pageable page);
	public List<Monster> findByTriplegodmagLessThan(Integer triplegodmag, Sort sort);
	public List<Monster> findByTriplegodmagGreaterThan(Integer triplegodmag);
	public Page<Monster> findByTriplegodmagGreaterThan(Integer triplegodmag, Pageable page);
	public List<Monster> findByTriplegodmagGreaterThan(Integer triplegodmag, Sort sort);
	public List<Monster> findByTurmoilsummon(Integer turmoilsummon);
	public Page<Monster> findByTurmoilsummon(Integer turmoilsummon, Pageable page);
	public List<Monster> findByTurmoilsummon(Integer turmoilsummon, Sort sort);
	public List<Monster> findByTurmoilsummonLessThan(Integer turmoilsummon);
	public Page<Monster> findByTurmoilsummonLessThan(Integer turmoilsummon, Pageable page);
	public List<Monster> findByTurmoilsummonLessThan(Integer turmoilsummon, Sort sort);
	public List<Monster> findByTurmoilsummonGreaterThan(Integer turmoilsummon);
	public Page<Monster> findByTurmoilsummonGreaterThan(Integer turmoilsummon, Pageable page);
	public List<Monster> findByTurmoilsummonGreaterThan(Integer turmoilsummon, Sort sort);
	public List<Monster> findByUndead(Boolean undead);
	public Page<Monster> findByUndead(Boolean undead, Pageable page);
	public List<Monster> findByUndead(Boolean undead, Sort sort);
	public List<Monster> findByUndeadleader(Integer undeadleader);
	public Page<Monster> findByUndeadleader(Integer undeadleader, Pageable page);
	public List<Monster> findByUndeadleader(Integer undeadleader, Sort sort);
	public List<Monster> findByUndeadleaderLessThan(Integer undeadleader);
	public Page<Monster> findByUndeadleaderLessThan(Integer undeadleader, Pageable page);
	public List<Monster> findByUndeadleaderLessThan(Integer undeadleader, Sort sort);
	public List<Monster> findByUndeadleaderGreaterThan(Integer undeadleader);
	public Page<Monster> findByUndeadleaderGreaterThan(Integer undeadleader, Pageable page);
	public List<Monster> findByUndeadleaderGreaterThan(Integer undeadleader, Sort sort);
	public List<Monster> findByUndisciplined(Boolean undisciplined);
	public Page<Monster> findByUndisciplined(Boolean undisciplined, Pageable page);
	public List<Monster> findByUndisciplined(Boolean undisciplined, Sort sort);
	public List<Monster> findByUnify(Boolean unify);
	public Page<Monster> findByUnify(Boolean unify, Pageable page);
	public List<Monster> findByUnify(Boolean unify, Sort sort);
	public List<Monster> findByUnique(Integer unique);
	public Page<Monster> findByUnique(Integer unique, Pageable page);
	public List<Monster> findByUnique(Integer unique, Sort sort);
	public List<Monster> findByUniqueLessThan(Integer unique);
	public Page<Monster> findByUniqueLessThan(Integer unique, Pageable page);
	public List<Monster> findByUniqueLessThan(Integer unique, Sort sort);
	public List<Monster> findByUniqueGreaterThan(Integer unique);
	public Page<Monster> findByUniqueGreaterThan(Integer unique, Pageable page);
	public List<Monster> findByUniqueGreaterThan(Integer unique, Sort sort);
	public List<Monster> findByUnsurroundable(Integer unsurroundable);
	public Page<Monster> findByUnsurroundable(Integer unsurroundable, Pageable page);
	public List<Monster> findByUnsurroundable(Integer unsurroundable, Sort sort);
	public List<Monster> findByUnsurroundableLessThan(Integer unsurroundable);
	public Page<Monster> findByUnsurroundableLessThan(Integer unsurroundable, Pageable page);
	public List<Monster> findByUnsurroundableLessThan(Integer unsurroundable, Sort sort);
	public List<Monster> findByUnsurroundableGreaterThan(Integer unsurroundable);
	public Page<Monster> findByUnsurroundableGreaterThan(Integer unsurroundable, Pageable page);
	public List<Monster> findByUnsurroundableGreaterThan(Integer unsurroundable, Sort sort);
	public List<Monster> findByUnteleportable(Boolean unteleportable);
	public Page<Monster> findByUnteleportable(Boolean unteleportable, Pageable page);
	public List<Monster> findByUnteleportable(Boolean unteleportable, Sort sort);
	public List<Monster> findByUwbug(Boolean uwbug);
	public Page<Monster> findByUwbug(Boolean uwbug, Pageable page);
	public List<Monster> findByUwbug(Boolean uwbug, Sort sort);
	public List<Monster> findByUwdamage(Integer uwdamage);
	public Page<Monster> findByUwdamage(Integer uwdamage, Pageable page);
	public List<Monster> findByUwdamage(Integer uwdamage, Sort sort);
	public List<Monster> findByUwdamageLessThan(Integer uwdamage);
	public Page<Monster> findByUwdamageLessThan(Integer uwdamage, Pageable page);
	public List<Monster> findByUwdamageLessThan(Integer uwdamage, Sort sort);
	public List<Monster> findByUwdamageGreaterThan(Integer uwdamage);
	public Page<Monster> findByUwdamageGreaterThan(Integer uwdamage, Pageable page);
	public List<Monster> findByUwdamageGreaterThan(Integer uwdamage, Sort sort);
	public List<Monster> findByUwheataura(Integer uwheataura);
	public Page<Monster> findByUwheataura(Integer uwheataura, Pageable page);
	public List<Monster> findByUwheataura(Integer uwheataura, Sort sort);
	public List<Monster> findByUwheatauraLessThan(Integer uwheataura);
	public Page<Monster> findByUwheatauraLessThan(Integer uwheataura, Pageable page);
	public List<Monster> findByUwheatauraLessThan(Integer uwheataura, Sort sort);
	public List<Monster> findByUwheatauraGreaterThan(Integer uwheataura);
	public Page<Monster> findByUwheatauraGreaterThan(Integer uwheataura, Pageable page);
	public List<Monster> findByUwheatauraGreaterThan(Integer uwheataura, Sort sort);
	public List<Monster> findByUwregen(Integer uwregen);
	public Page<Monster> findByUwregen(Integer uwregen, Pageable page);
	public List<Monster> findByUwregen(Integer uwregen, Sort sort);
	public List<Monster> findByUwregenLessThan(Integer uwregen);
	public Page<Monster> findByUwregenLessThan(Integer uwregen, Pageable page);
	public List<Monster> findByUwregenLessThan(Integer uwregen, Sort sort);
	public List<Monster> findByUwregenGreaterThan(Integer uwregen);
	public Page<Monster> findByUwregenGreaterThan(Integer uwregen, Pageable page);
	public List<Monster> findByUwregenGreaterThan(Integer uwregen, Sort sort);
	public List<Monster> findByVineshield(Integer vineshield);
	public Page<Monster> findByVineshield(Integer vineshield, Pageable page);
	public List<Monster> findByVineshield(Integer vineshield, Sort sort);
	public List<Monster> findByVineshieldLessThan(Integer vineshield);
	public Page<Monster> findByVineshieldLessThan(Integer vineshield, Pageable page);
	public List<Monster> findByVineshieldLessThan(Integer vineshield, Sort sort);
	public List<Monster> findByVineshieldGreaterThan(Integer vineshield);
	public Page<Monster> findByVineshieldGreaterThan(Integer vineshield, Pageable page);
	public List<Monster> findByVineshieldGreaterThan(Integer vineshield, Sort sort);
	public List<Monster> findByVoidsanity(Integer voidsanity);
	public Page<Monster> findByVoidsanity(Integer voidsanity, Pageable page);
	public List<Monster> findByVoidsanity(Integer voidsanity, Sort sort);
	public List<Monster> findByVoidsanityLessThan(Integer voidsanity);
	public Page<Monster> findByVoidsanityLessThan(Integer voidsanity, Pageable page);
	public List<Monster> findByVoidsanityLessThan(Integer voidsanity, Sort sort);
	public List<Monster> findByVoidsanityGreaterThan(Integer voidsanity);
	public Page<Monster> findByVoidsanityGreaterThan(Integer voidsanity, Pageable page);
	public List<Monster> findByVoidsanityGreaterThan(Integer voidsanity, Sort sort);
	public List<Monster> findByVoidsum(Integer voidsum);
	public Page<Monster> findByVoidsum(Integer voidsum, Pageable page);
	public List<Monster> findByVoidsum(Integer voidsum, Sort sort);
	public List<Monster> findByVoidsumLessThan(Integer voidsum);
	public Page<Monster> findByVoidsumLessThan(Integer voidsum, Pageable page);
	public List<Monster> findByVoidsumLessThan(Integer voidsum, Sort sort);
	public List<Monster> findByVoidsumGreaterThan(Integer voidsum);
	public Page<Monster> findByVoidsumGreaterThan(Integer voidsum, Pageable page);
	public List<Monster> findByVoidsumGreaterThan(Integer voidsum, Sort sort);
	public List<Monster> findByW(Integer w);
	public Page<Monster> findByW(Integer w, Pageable page);
	public List<Monster> findByW(Integer w, Sort sort);
	public List<Monster> findByWLessThan(Integer w);
	public Page<Monster> findByWLessThan(Integer w, Pageable page);
	public List<Monster> findByWLessThan(Integer w, Sort sort);
	public List<Monster> findByWGreaterThan(Integer w);
	public Page<Monster> findByWGreaterThan(Integer w, Pageable page);
	public List<Monster> findByWGreaterThan(Integer w, Sort sort);
	public List<Monster> findByWastesurvival(Boolean wastesurvival);
	public Page<Monster> findByWastesurvival(Boolean wastesurvival, Pageable page);
	public List<Monster> findByWastesurvival(Boolean wastesurvival, Sort sort);
	public List<Monster> findByWaterattuned(Integer waterattuned);
	public Page<Monster> findByWaterattuned(Integer waterattuned, Pageable page);
	public List<Monster> findByWaterattuned(Integer waterattuned, Sort sort);
	public List<Monster> findByWaterattunedLessThan(Integer waterattuned);
	public Page<Monster> findByWaterattunedLessThan(Integer waterattuned, Pageable page);
	public List<Monster> findByWaterattunedLessThan(Integer waterattuned, Sort sort);
	public List<Monster> findByWaterattunedGreaterThan(Integer waterattuned);
	public Page<Monster> findByWaterattunedGreaterThan(Integer waterattuned, Pageable page);
	public List<Monster> findByWaterattunedGreaterThan(Integer waterattuned, Sort sort);
	public List<Monster> findByWaterbreathing(Integer waterbreathing);
	public Page<Monster> findByWaterbreathing(Integer waterbreathing, Pageable page);
	public List<Monster> findByWaterbreathing(Integer waterbreathing, Sort sort);
	public List<Monster> findByWaterbreathingLessThan(Integer waterbreathing);
	public Page<Monster> findByWaterbreathingLessThan(Integer waterbreathing, Pageable page);
	public List<Monster> findByWaterbreathingLessThan(Integer waterbreathing, Sort sort);
	public List<Monster> findByWaterbreathingGreaterThan(Integer waterbreathing);
	public Page<Monster> findByWaterbreathingGreaterThan(Integer waterbreathing, Pageable page);
	public List<Monster> findByWaterbreathingGreaterThan(Integer waterbreathing, Sort sort);
	public List<Monster> findByWatershape(Integer watershape);
	public Page<Monster> findByWatershape(Integer watershape, Pageable page);
	public List<Monster> findByWatershape(Integer watershape, Sort sort);
	public List<Monster> findByWatershapeLessThan(Integer watershape);
	public Page<Monster> findByWatershapeLessThan(Integer watershape, Pageable page);
	public List<Monster> findByWatershapeLessThan(Integer watershape, Sort sort);
	public List<Monster> findByWatershapeGreaterThan(Integer watershape);
	public Page<Monster> findByWatershapeGreaterThan(Integer watershape, Pageable page);
	public List<Monster> findByWatershapeGreaterThan(Integer watershape, Sort sort);
	public List<Monster> findByWinterpower(Integer winterpower);
	public Page<Monster> findByWinterpower(Integer winterpower, Pageable page);
	public List<Monster> findByWinterpower(Integer winterpower, Sort sort);
	public List<Monster> findByWinterpowerLessThan(Integer winterpower);
	public Page<Monster> findByWinterpowerLessThan(Integer winterpower, Pageable page);
	public List<Monster> findByWinterpowerLessThan(Integer winterpower, Sort sort);
	public List<Monster> findByWinterpowerGreaterThan(Integer winterpower);
	public Page<Monster> findByWinterpowerGreaterThan(Integer winterpower, Pageable page);
	public List<Monster> findByWinterpowerGreaterThan(Integer winterpower, Sort sort);
	public List<Monster> findByWolftattoo(Integer wolftattoo);
	public Page<Monster> findByWolftattoo(Integer wolftattoo, Pageable page);
	public List<Monster> findByWolftattoo(Integer wolftattoo, Sort sort);
	public List<Monster> findByWolftattooLessThan(Integer wolftattoo);
	public Page<Monster> findByWolftattooLessThan(Integer wolftattoo, Pageable page);
	public List<Monster> findByWolftattooLessThan(Integer wolftattoo, Sort sort);
	public List<Monster> findByWolftattooGreaterThan(Integer wolftattoo);
	public Page<Monster> findByWolftattooGreaterThan(Integer wolftattoo, Pageable page);
	public List<Monster> findByWolftattooGreaterThan(Integer wolftattoo, Sort sort);
	public List<Monster> findByXploss(Integer xploss);
	public Page<Monster> findByXploss(Integer xploss, Pageable page);
	public List<Monster> findByXploss(Integer xploss, Sort sort);
	public List<Monster> findByXplossLessThan(Integer xploss);
	public Page<Monster> findByXplossLessThan(Integer xploss, Pageable page);
	public List<Monster> findByXplossLessThan(Integer xploss, Sort sort);
	public List<Monster> findByXplossGreaterThan(Integer xploss);
	public Page<Monster> findByXplossGreaterThan(Integer xploss, Pageable page);
	public List<Monster> findByXplossGreaterThan(Integer xploss, Sort sort);
	public List<Monster> findByXpshape(Integer xpshape);
	public Page<Monster> findByXpshape(Integer xpshape, Pageable page);
	public List<Monster> findByXpshape(Integer xpshape, Sort sort);
	public List<Monster> findByXpshapeLessThan(Integer xpshape);
	public Page<Monster> findByXpshapeLessThan(Integer xpshape, Pageable page);
	public List<Monster> findByXpshapeLessThan(Integer xpshape, Sort sort);
	public List<Monster> findByXpshapeGreaterThan(Integer xpshape);
	public Page<Monster> findByXpshapeGreaterThan(Integer xpshape, Pageable page);
	public List<Monster> findByXpshapeGreaterThan(Integer xpshape, Sort sort);
}
