package com.larz.dom5api;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MonsterRepository extends JpaRepository<Monster, Long> {
	
	public List<Monster> findByName(String name);
	public Page<Monster> findByName(String name, Pageable page);
	public List<Monster> findByName(String name, Sort sort);
	
	public List<Monster> findByA(Integer a);
	public Page<Monster> findByA(Integer a, Pageable page);
	public List<Monster> findByA(Integer a, Sort sort);
	public List<Monster> findByALessThan(Integer a);
	public Page<Monster> findByALessThan(Integer a, Pageable page);
	public List<Monster> findByALessThan(Integer a, Sort sort);
	public List<Monster> findByAGreaterThan(Integer a);
	public Page<Monster> findByAGreaterThan(Integer a, Pageable page);
	public List<Monster> findByAGreaterThan(Integer a, Sort sort);
	public List<Monster> findByAcidsplash(Integer acidsplash);
	public Page<Monster> findByAcidsplash(Integer acidsplash, Pageable page);
	public List<Monster> findByAcidsplash(Integer acidsplash, Sort sort);
	public List<Monster> findByAcidsplashLessThan(Integer acidsplash);
	public Page<Monster> findByAcidsplashLessThan(Integer acidsplash, Pageable page);
	public List<Monster> findByAcidsplashLessThan(Integer acidsplash, Sort sort);
	public List<Monster> findByAcidsplashGreaterThan(Integer acidsplash);
	public Page<Monster> findByAcidsplashGreaterThan(Integer acidsplash, Pageable page);
	public List<Monster> findByAcidsplashGreaterThan(Integer acidsplash, Sort sort);
	public List<Monster> findByAdventurers(Boolean adventurers);
	public Page<Monster> findByAdventurers(Boolean adventurers, Pageable page);
	public List<Monster> findByAdventurers(Boolean adventurers, Sort sort);
	public List<Monster> findByAfflictionresistance(Integer afflictionresistance);
	public Page<Monster> findByAfflictionresistance(Integer afflictionresistance, Pageable page);
	public List<Monster> findByAfflictionresistance(Integer afflictionresistance, Sort sort);
	public List<Monster> findByAfflictionresistanceLessThan(Integer afflictionresistance);
	public Page<Monster> findByAfflictionresistanceLessThan(Integer afflictionresistance, Pageable page);
	public List<Monster> findByAfflictionresistanceLessThan(Integer afflictionresistance, Sort sort);
	public List<Monster> findByAfflictionresistanceGreaterThan(Integer afflictionresistance);
	public Page<Monster> findByAfflictionresistanceGreaterThan(Integer afflictionresistance, Pageable page);
	public List<Monster> findByAfflictionresistanceGreaterThan(Integer afflictionresistance, Sort sort);
	public List<Monster> findByAinorecruit(Boolean ainorecruit);
	public Page<Monster> findByAinorecruit(Boolean ainorecruit, Pageable page);
	public List<Monster> findByAinorecruit(Boolean ainorecruit, Sort sort);
	public List<Monster> findByAirattuned(Integer airattuned);
	public Page<Monster> findByAirattuned(Integer airattuned, Pageable page);
	public List<Monster> findByAirattuned(Integer airattuned, Sort sort);
	public List<Monster> findByAirattunedLessThan(Integer airattuned);
	public Page<Monster> findByAirattunedLessThan(Integer airattuned, Pageable page);
	public List<Monster> findByAirattunedLessThan(Integer airattuned, Sort sort);
	public List<Monster> findByAirattunedGreaterThan(Integer airattuned);
	public Page<Monster> findByAirattunedGreaterThan(Integer airattuned, Pageable page);
	public List<Monster> findByAirattunedGreaterThan(Integer airattuned, Sort sort);
	public List<Monster> findByAisinglerec(Boolean aisinglerec);
	public Page<Monster> findByAisinglerec(Boolean aisinglerec, Pageable page);
	public List<Monster> findByAisinglerec(Boolean aisinglerec, Sort sort);
	public List<Monster> findByAlch(Boolean alch);
	public Page<Monster> findByAlch(Boolean alch, Pageable page);
	public List<Monster> findByAlch(Boolean alch, Sort sort);
	public List<Monster> findByAlchemy(Integer alchemy);
	public Page<Monster> findByAlchemy(Integer alchemy, Pageable page);
	public List<Monster> findByAlchemy(Integer alchemy, Sort sort);
	public List<Monster> findByAlchemyLessThan(Integer alchemy);
	public Page<Monster> findByAlchemyLessThan(Integer alchemy, Pageable page);
	public List<Monster> findByAlchemyLessThan(Integer alchemy, Sort sort);
	public List<Monster> findByAlchemyGreaterThan(Integer alchemy);
	public Page<Monster> findByAlchemyGreaterThan(Integer alchemy, Pageable page);
	public List<Monster> findByAlchemyGreaterThan(Integer alchemy, Sort sort);
	public List<Monster> findByAllrange(Boolean allrange);
	public Page<Monster> findByAllrange(Boolean allrange, Pageable page);
	public List<Monster> findByAllrange(Boolean allrange, Sort sort);
	public List<Monster> findByAmbidextrous(Integer ambidextrous);
	public Page<Monster> findByAmbidextrous(Integer ambidextrous, Pageable page);
	public List<Monster> findByAmbidextrous(Integer ambidextrous, Sort sort);
	public List<Monster> findByAmbidextrousLessThan(Integer ambidextrous);
	public Page<Monster> findByAmbidextrousLessThan(Integer ambidextrous, Pageable page);
	public List<Monster> findByAmbidextrousLessThan(Integer ambidextrous, Sort sort);
	public List<Monster> findByAmbidextrousGreaterThan(Integer ambidextrous);
	public Page<Monster> findByAmbidextrousGreaterThan(Integer ambidextrous, Pageable page);
	public List<Monster> findByAmbidextrousGreaterThan(Integer ambidextrous, Sort sort);
	public List<Monster> findByAmphibian(Boolean amphibian);
	public Page<Monster> findByAmphibian(Boolean amphibian, Pageable page);
	public List<Monster> findByAmphibian(Boolean amphibian, Sort sort);
	public List<Monster> findByAnimal(Boolean animal);
	public Page<Monster> findByAnimal(Boolean animal, Pageable page);
	public List<Monster> findByAnimal(Boolean animal, Sort sort);
	public List<Monster> findByAnimalawe(Boolean animalawe);
	public Page<Monster> findByAnimalawe(Boolean animalawe, Pageable page);
	public List<Monster> findByAnimalawe(Boolean animalawe, Sort sort);
	public List<Monster> findByAp(Integer ap);
	public Page<Monster> findByAp(Integer ap, Pageable page);
	public List<Monster> findByAp(Integer ap, Sort sort);
	public List<Monster> findByApLessThan(Integer ap);
	public Page<Monster> findByApLessThan(Integer ap, Pageable page);
	public List<Monster> findByApLessThan(Integer ap, Sort sort);
	public List<Monster> findByApGreaterThan(Integer ap);
	public Page<Monster> findByApGreaterThan(Integer ap, Pageable page);
	public List<Monster> findByApGreaterThan(Integer ap, Sort sort);
	public List<Monster> findByAquatic(Boolean aquatic);
	public Page<Monster> findByAquatic(Boolean aquatic, Pageable page);
	public List<Monster> findByAquatic(Boolean aquatic, Sort sort);
	public List<Monster> findByAssassin(Integer assassin);
	public Page<Monster> findByAssassin(Integer assassin, Pageable page);
	public List<Monster> findByAssassin(Integer assassin, Sort sort);
	public List<Monster> findByAssassinLessThan(Integer assassin);
	public Page<Monster> findByAssassinLessThan(Integer assassin, Pageable page);
	public List<Monster> findByAssassinLessThan(Integer assassin, Sort sort);
	public List<Monster> findByAssassinGreaterThan(Integer assassin);
	public Page<Monster> findByAssassinGreaterThan(Integer assassin, Pageable page);
	public List<Monster> findByAssassinGreaterThan(Integer assassin, Sort sort);
	public List<Monster> findByAstralattuned(Integer astralattuned);
	public Page<Monster> findByAstralattuned(Integer astralattuned, Pageable page);
	public List<Monster> findByAstralattuned(Integer astralattuned, Sort sort);
	public List<Monster> findByAstralattunedLessThan(Integer astralattuned);
	public Page<Monster> findByAstralattunedLessThan(Integer astralattuned, Pageable page);
	public List<Monster> findByAstralattunedLessThan(Integer astralattuned, Sort sort);
	public List<Monster> findByAstralattunedGreaterThan(Integer astralattuned);
	public Page<Monster> findByAstralattunedGreaterThan(Integer astralattuned, Pageable page);
	public List<Monster> findByAstralattunedGreaterThan(Integer astralattuned, Sort sort);
	public List<Monster> findByAstralfetters(Boolean astralfetters);
	public Page<Monster> findByAstralfetters(Boolean astralfetters, Pageable page);
	public List<Monster> findByAstralfetters(Boolean astralfetters, Sort sort);
	public List<Monster> findByAstralrange(Integer astralrange);
	public Page<Monster> findByAstralrange(Integer astralrange, Pageable page);
	public List<Monster> findByAstralrange(Integer astralrange, Sort sort);
	public List<Monster> findByAstralrangeLessThan(Integer astralrange);
	public Page<Monster> findByAstralrangeLessThan(Integer astralrange, Pageable page);
	public List<Monster> findByAstralrangeLessThan(Integer astralrange, Sort sort);
	public List<Monster> findByAstralrangeGreaterThan(Integer astralrange);
	public Page<Monster> findByAstralrangeGreaterThan(Integer astralrange, Pageable page);
	public List<Monster> findByAstralrangeGreaterThan(Integer astralrange, Sort sort);
	public List<Monster> findByAtt(Integer att);
	public Page<Monster> findByAtt(Integer att, Pageable page);
	public List<Monster> findByAtt(Integer att, Sort sort);
	public List<Monster> findByAttLessThan(Integer att);
	public Page<Monster> findByAttLessThan(Integer att, Pageable page);
	public List<Monster> findByAttLessThan(Integer att, Sort sort);
	public List<Monster> findByAttGreaterThan(Integer att);
	public Page<Monster> findByAttGreaterThan(Integer att, Pageable page);
	public List<Monster> findByAttGreaterThan(Integer att, Sort sort);
	public List<Monster> findByAutocomslave(Boolean autocomslave);
	public Page<Monster> findByAutocomslave(Boolean autocomslave, Pageable page);
	public List<Monster> findByAutocomslave(Boolean autocomslave, Sort sort);
	public List<Monster> findByAutodishealer(Integer autodishealer);
	public Page<Monster> findByAutodishealer(Integer autodishealer, Pageable page);
	public List<Monster> findByAutodishealer(Integer autodishealer, Sort sort);
	public List<Monster> findByAutodishealerLessThan(Integer autodishealer);
	public Page<Monster> findByAutodishealerLessThan(Integer autodishealer, Pageable page);
	public List<Monster> findByAutodishealerLessThan(Integer autodishealer, Sort sort);
	public List<Monster> findByAutodishealerGreaterThan(Integer autodishealer);
	public Page<Monster> findByAutodishealerGreaterThan(Integer autodishealer, Pageable page);
	public List<Monster> findByAutodishealerGreaterThan(Integer autodishealer, Sort sort);
	public List<Monster> findByAutohealer(Integer autohealer);
	public Page<Monster> findByAutohealer(Integer autohealer, Pageable page);
	public List<Monster> findByAutohealer(Integer autohealer, Sort sort);
	public List<Monster> findByAutohealerLessThan(Integer autohealer);
	public Page<Monster> findByAutohealerLessThan(Integer autohealer, Pageable page);
	public List<Monster> findByAutohealerLessThan(Integer autohealer, Sort sort);
	public List<Monster> findByAutohealerGreaterThan(Integer autohealer);
	public Page<Monster> findByAutohealerGreaterThan(Integer autohealer, Pageable page);
	public List<Monster> findByAutohealerGreaterThan(Integer autohealer, Sort sort);
	public List<Monster> findByAutosum(Integer autosum);
	public Page<Monster> findByAutosum(Integer autosum, Pageable page);
	public List<Monster> findByAutosum(Integer autosum, Sort sort);
	public List<Monster> findByAutosumLessThan(Integer autosum);
	public Page<Monster> findByAutosumLessThan(Integer autosum, Pageable page);
	public List<Monster> findByAutosumLessThan(Integer autosum, Sort sort);
	public List<Monster> findByAutosumGreaterThan(Integer autosum);
	public Page<Monster> findByAutosumGreaterThan(Integer autosum, Pageable page);
	public List<Monster> findByAutosumGreaterThan(Integer autosum, Sort sort);
	public List<Monster> findByAwe(Integer awe);
	public Page<Monster> findByAwe(Integer awe, Pageable page);
	public List<Monster> findByAwe(Integer awe, Sort sort);
	public List<Monster> findByAweLessThan(Integer awe);
	public Page<Monster> findByAweLessThan(Integer awe, Pageable page);
	public List<Monster> findByAweLessThan(Integer awe, Sort sort);
	public List<Monster> findByAweGreaterThan(Integer awe);
	public Page<Monster> findByAweGreaterThan(Integer awe, Pageable page);
	public List<Monster> findByAweGreaterThan(Integer awe, Sort sort);
	public List<Monster> findByB(Integer b);
	public Page<Monster> findByB(Integer b, Pageable page);
	public List<Monster> findByB(Integer b, Sort sort);
	public List<Monster> findByBLessThan(Integer b);
	public Page<Monster> findByBLessThan(Integer b, Pageable page);
	public List<Monster> findByBLessThan(Integer b, Sort sort);
	public List<Monster> findByBGreaterThan(Integer b);
	public Page<Monster> findByBGreaterThan(Integer b, Pageable page);
	public List<Monster> findByBGreaterThan(Integer b, Sort sort);
	public List<Monster> findByBanefireshield(Integer banefireshield);
	public Page<Monster> findByBanefireshield(Integer banefireshield, Pageable page);
	public List<Monster> findByBanefireshield(Integer banefireshield, Sort sort);
	public List<Monster> findByBanefireshieldLessThan(Integer banefireshield);
	public Page<Monster> findByBanefireshieldLessThan(Integer banefireshield, Pageable page);
	public List<Monster> findByBanefireshieldLessThan(Integer banefireshield, Sort sort);
	public List<Monster> findByBanefireshieldGreaterThan(Integer banefireshield);
	public Page<Monster> findByBanefireshieldGreaterThan(Integer banefireshield, Pageable page);
	public List<Monster> findByBanefireshieldGreaterThan(Integer banefireshield, Sort sort);
	public List<Monster> findByBarbs(Boolean barbs);
	public Page<Monster> findByBarbs(Boolean barbs, Pageable page);
	public List<Monster> findByBarbs(Boolean barbs, Sort sort);
	public List<Monster> findByBasecost(Integer basecost);
	public Page<Monster> findByBasecost(Integer basecost, Pageable page);
	public List<Monster> findByBasecost(Integer basecost, Sort sort);
	public List<Monster> findByBasecostLessThan(Integer basecost);
	public Page<Monster> findByBasecostLessThan(Integer basecost, Pageable page);
	public List<Monster> findByBasecostLessThan(Integer basecost, Sort sort);
	public List<Monster> findByBasecostGreaterThan(Integer basecost);
	public Page<Monster> findByBasecostGreaterThan(Integer basecost, Pageable page);
	public List<Monster> findByBasecostGreaterThan(Integer basecost, Sort sort);
	public List<Monster> findByBatstartsum1(Integer batstartsum1);
	public Page<Monster> findByBatstartsum1(Integer batstartsum1, Pageable page);
	public List<Monster> findByBatstartsum1(Integer batstartsum1, Sort sort);
	public List<Monster> findByBatstartsum1LessThan(Integer batstartsum1);
	public Page<Monster> findByBatstartsum1LessThan(Integer batstartsum1, Pageable page);
	public List<Monster> findByBatstartsum1LessThan(Integer batstartsum1, Sort sort);
	public List<Monster> findByBatstartsum1GreaterThan(Integer batstartsum1);
	public Page<Monster> findByBatstartsum1GreaterThan(Integer batstartsum1, Pageable page);
	public List<Monster> findByBatstartsum1GreaterThan(Integer batstartsum1, Sort sort);
	public List<Monster> findByBatstartsum1d6(Integer batstartsum1d6);
	public Page<Monster> findByBatstartsum1d6(Integer batstartsum1d6, Pageable page);
	public List<Monster> findByBatstartsum1d6(Integer batstartsum1d6, Sort sort);
	public List<Monster> findByBatstartsum1d6LessThan(Integer batstartsum1d6);
	public Page<Monster> findByBatstartsum1d6LessThan(Integer batstartsum1d6, Pageable page);
	public List<Monster> findByBatstartsum1d6LessThan(Integer batstartsum1d6, Sort sort);
	public List<Monster> findByBatstartsum1d6GreaterThan(Integer batstartsum1d6);
	public Page<Monster> findByBatstartsum1d6GreaterThan(Integer batstartsum1d6, Pageable page);
	public List<Monster> findByBatstartsum1d6GreaterThan(Integer batstartsum1d6, Sort sort);
	public List<Monster> findByBatstartsum2(Integer batstartsum2);
	public Page<Monster> findByBatstartsum2(Integer batstartsum2, Pageable page);
	public List<Monster> findByBatstartsum2(Integer batstartsum2, Sort sort);
	public List<Monster> findByBatstartsum2LessThan(Integer batstartsum2);
	public Page<Monster> findByBatstartsum2LessThan(Integer batstartsum2, Pageable page);
	public List<Monster> findByBatstartsum2LessThan(Integer batstartsum2, Sort sort);
	public List<Monster> findByBatstartsum2GreaterThan(Integer batstartsum2);
	public Page<Monster> findByBatstartsum2GreaterThan(Integer batstartsum2, Pageable page);
	public List<Monster> findByBatstartsum2GreaterThan(Integer batstartsum2, Sort sort);
	public List<Monster> findByBatstartsum2d6(Integer batstartsum2d6);
	public Page<Monster> findByBatstartsum2d6(Integer batstartsum2d6, Pageable page);
	public List<Monster> findByBatstartsum2d6(Integer batstartsum2d6, Sort sort);
	public List<Monster> findByBatstartsum2d6LessThan(Integer batstartsum2d6);
	public Page<Monster> findByBatstartsum2d6LessThan(Integer batstartsum2d6, Pageable page);
	public List<Monster> findByBatstartsum2d6LessThan(Integer batstartsum2d6, Sort sort);
	public List<Monster> findByBatstartsum2d6GreaterThan(Integer batstartsum2d6);
	public Page<Monster> findByBatstartsum2d6GreaterThan(Integer batstartsum2d6, Pageable page);
	public List<Monster> findByBatstartsum2d6GreaterThan(Integer batstartsum2d6, Sort sort);
	public List<Monster> findByBatstartsum3(Integer batstartsum3);
	public Page<Monster> findByBatstartsum3(Integer batstartsum3, Pageable page);
	public List<Monster> findByBatstartsum3(Integer batstartsum3, Sort sort);
	public List<Monster> findByBatstartsum3LessThan(Integer batstartsum3);
	public Page<Monster> findByBatstartsum3LessThan(Integer batstartsum3, Pageable page);
	public List<Monster> findByBatstartsum3LessThan(Integer batstartsum3, Sort sort);
	public List<Monster> findByBatstartsum3GreaterThan(Integer batstartsum3);
	public Page<Monster> findByBatstartsum3GreaterThan(Integer batstartsum3, Pageable page);
	public List<Monster> findByBatstartsum3GreaterThan(Integer batstartsum3, Sort sort);
	public List<Monster> findByBatstartsum3d6(Integer batstartsum3d6);
	public Page<Monster> findByBatstartsum3d6(Integer batstartsum3d6, Pageable page);
	public List<Monster> findByBatstartsum3d6(Integer batstartsum3d6, Sort sort);
	public List<Monster> findByBatstartsum3d6LessThan(Integer batstartsum3d6);
	public Page<Monster> findByBatstartsum3d6LessThan(Integer batstartsum3d6, Pageable page);
	public List<Monster> findByBatstartsum3d6LessThan(Integer batstartsum3d6, Sort sort);
	public List<Monster> findByBatstartsum3d6GreaterThan(Integer batstartsum3d6);
	public Page<Monster> findByBatstartsum3d6GreaterThan(Integer batstartsum3d6, Pageable page);
	public List<Monster> findByBatstartsum3d6GreaterThan(Integer batstartsum3d6, Sort sort);
	public List<Monster> findByBatstartsum4(Boolean batstartsum4);
	public Page<Monster> findByBatstartsum4(Boolean batstartsum4, Pageable page);
	public List<Monster> findByBatstartsum4(Boolean batstartsum4, Sort sort);
	public List<Monster> findByBatstartsum4d6(Integer batstartsum4d6);
	public Page<Monster> findByBatstartsum4d6(Integer batstartsum4d6, Pageable page);
	public List<Monster> findByBatstartsum4d6(Integer batstartsum4d6, Sort sort);
	public List<Monster> findByBatstartsum4d6LessThan(Integer batstartsum4d6);
	public Page<Monster> findByBatstartsum4d6LessThan(Integer batstartsum4d6, Pageable page);
	public List<Monster> findByBatstartsum4d6LessThan(Integer batstartsum4d6, Sort sort);
	public List<Monster> findByBatstartsum4d6GreaterThan(Integer batstartsum4d6);
	public Page<Monster> findByBatstartsum4d6GreaterThan(Integer batstartsum4d6, Pageable page);
	public List<Monster> findByBatstartsum4d6GreaterThan(Integer batstartsum4d6, Sort sort);
	public List<Monster> findByBatstartsum5(Boolean batstartsum5);
	public Page<Monster> findByBatstartsum5(Boolean batstartsum5, Pageable page);
	public List<Monster> findByBatstartsum5(Boolean batstartsum5, Sort sort);
	public List<Monster> findByBatstartsum5d6(Integer batstartsum5d6);
	public Page<Monster> findByBatstartsum5d6(Integer batstartsum5d6, Pageable page);
	public List<Monster> findByBatstartsum5d6(Integer batstartsum5d6, Sort sort);
	public List<Monster> findByBatstartsum5d6LessThan(Integer batstartsum5d6);
	public Page<Monster> findByBatstartsum5d6LessThan(Integer batstartsum5d6, Pageable page);
	public List<Monster> findByBatstartsum5d6LessThan(Integer batstartsum5d6, Sort sort);
	public List<Monster> findByBatstartsum5d6GreaterThan(Integer batstartsum5d6);
	public Page<Monster> findByBatstartsum5d6GreaterThan(Integer batstartsum5d6, Pageable page);
	public List<Monster> findByBatstartsum5d6GreaterThan(Integer batstartsum5d6, Sort sort);
	public List<Monster> findByBatstartsum6d6(Integer batstartsum6d6);
	public Page<Monster> findByBatstartsum6d6(Integer batstartsum6d6, Pageable page);
	public List<Monster> findByBatstartsum6d6(Integer batstartsum6d6, Sort sort);
	public List<Monster> findByBatstartsum6d6LessThan(Integer batstartsum6d6);
	public Page<Monster> findByBatstartsum6d6LessThan(Integer batstartsum6d6, Pageable page);
	public List<Monster> findByBatstartsum6d6LessThan(Integer batstartsum6d6, Sort sort);
	public List<Monster> findByBatstartsum6d6GreaterThan(Integer batstartsum6d6);
	public Page<Monster> findByBatstartsum6d6GreaterThan(Integer batstartsum6d6, Pageable page);
	public List<Monster> findByBatstartsum6d6GreaterThan(Integer batstartsum6d6, Sort sort);
	public List<Monster> findByBattlesum5(Integer battlesum5);
	public Page<Monster> findByBattlesum5(Integer battlesum5, Pageable page);
	public List<Monster> findByBattlesum5(Integer battlesum5, Sort sort);
	public List<Monster> findByBattlesum5LessThan(Integer battlesum5);
	public Page<Monster> findByBattlesum5LessThan(Integer battlesum5, Pageable page);
	public List<Monster> findByBattlesum5LessThan(Integer battlesum5, Sort sort);
	public List<Monster> findByBattlesum5GreaterThan(Integer battlesum5);
	public Page<Monster> findByBattlesum5GreaterThan(Integer battlesum5, Pageable page);
	public List<Monster> findByBattlesum5GreaterThan(Integer battlesum5, Sort sort);
	public List<Monster> findByBeartattoo(Integer beartattoo);
	public Page<Monster> findByBeartattoo(Integer beartattoo, Pageable page);
	public List<Monster> findByBeartattoo(Integer beartattoo, Sort sort);
	public List<Monster> findByBeartattooLessThan(Integer beartattoo);
	public Page<Monster> findByBeartattooLessThan(Integer beartattoo, Pageable page);
	public List<Monster> findByBeartattooLessThan(Integer beartattoo, Sort sort);
	public List<Monster> findByBeartattooGreaterThan(Integer beartattoo);
	public Page<Monster> findByBeartattooGreaterThan(Integer beartattoo, Pageable page);
	public List<Monster> findByBeartattooGreaterThan(Integer beartattoo, Sort sort);
	public List<Monster> findByBeastmaster(Integer beastmaster);
	public Page<Monster> findByBeastmaster(Integer beastmaster, Pageable page);
	public List<Monster> findByBeastmaster(Integer beastmaster, Sort sort);
	public List<Monster> findByBeastmasterLessThan(Integer beastmaster);
	public Page<Monster> findByBeastmasterLessThan(Integer beastmaster, Pageable page);
	public List<Monster> findByBeastmasterLessThan(Integer beastmaster, Sort sort);
	public List<Monster> findByBeastmasterGreaterThan(Integer beastmaster);
	public Page<Monster> findByBeastmasterGreaterThan(Integer beastmaster, Pageable page);
	public List<Monster> findByBeastmasterGreaterThan(Integer beastmaster, Sort sort);
	public List<Monster> findByBerserk(Integer berserk);
	public Page<Monster> findByBerserk(Integer berserk, Pageable page);
	public List<Monster> findByBerserk(Integer berserk, Sort sort);
	public List<Monster> findByBerserkLessThan(Integer berserk);
	public Page<Monster> findByBerserkLessThan(Integer berserk, Pageable page);
	public List<Monster> findByBerserkLessThan(Integer berserk, Sort sort);
	public List<Monster> findByBerserkGreaterThan(Integer berserk);
	public Page<Monster> findByBerserkGreaterThan(Integer berserk, Pageable page);
	public List<Monster> findByBerserkGreaterThan(Integer berserk, Sort sort);
	public List<Monster> findByBerserkwhenblessed(Integer berserkwhenblessed);
	public Page<Monster> findByBerserkwhenblessed(Integer berserkwhenblessed, Pageable page);
	public List<Monster> findByBerserkwhenblessed(Integer berserkwhenblessed, Sort sort);
	public List<Monster> findByBerserkwhenblessedLessThan(Integer berserkwhenblessed);
	public Page<Monster> findByBerserkwhenblessedLessThan(Integer berserkwhenblessed, Pageable page);
	public List<Monster> findByBerserkwhenblessedLessThan(Integer berserkwhenblessed, Sort sort);
	public List<Monster> findByBerserkwhenblessedGreaterThan(Integer berserkwhenblessed);
	public Page<Monster> findByBerserkwhenblessedGreaterThan(Integer berserkwhenblessed, Pageable page);
	public List<Monster> findByBerserkwhenblessedGreaterThan(Integer berserkwhenblessed, Sort sort);
	public List<Monster> findByBlind(Boolean blind);
	public Page<Monster> findByBlind(Boolean blind, Pageable page);
	public List<Monster> findByBlind(Boolean blind, Sort sort);
	public List<Monster> findByBloodattuned(Boolean bloodattuned);
	public Page<Monster> findByBloodattuned(Boolean bloodattuned, Pageable page);
	public List<Monster> findByBloodattuned(Boolean bloodattuned, Sort sort);
	public List<Monster> findByBloodvengeance(Integer bloodvengeance);
	public Page<Monster> findByBloodvengeance(Integer bloodvengeance, Pageable page);
	public List<Monster> findByBloodvengeance(Integer bloodvengeance, Sort sort);
	public List<Monster> findByBloodvengeanceLessThan(Integer bloodvengeance);
	public Page<Monster> findByBloodvengeanceLessThan(Integer bloodvengeance, Pageable page);
	public List<Monster> findByBloodvengeanceLessThan(Integer bloodvengeance, Sort sort);
	public List<Monster> findByBloodvengeanceGreaterThan(Integer bloodvengeance);
	public Page<Monster> findByBloodvengeanceGreaterThan(Integer bloodvengeance, Pageable page);
	public List<Monster> findByBloodvengeanceGreaterThan(Integer bloodvengeance, Sort sort);
	public List<Monster> findByBluntres(Boolean bluntres);
	public Page<Monster> findByBluntres(Boolean bluntres, Pageable page);
	public List<Monster> findByBluntres(Boolean bluntres, Sort sort);
	public List<Monster> findByBoartattoo(Integer boartattoo);
	public Page<Monster> findByBoartattoo(Integer boartattoo, Pageable page);
	public List<Monster> findByBoartattoo(Integer boartattoo, Sort sort);
	public List<Monster> findByBoartattooLessThan(Integer boartattoo);
	public Page<Monster> findByBoartattooLessThan(Integer boartattoo, Pageable page);
	public List<Monster> findByBoartattooLessThan(Integer boartattoo, Sort sort);
	public List<Monster> findByBoartattooGreaterThan(Integer boartattoo);
	public Page<Monster> findByBoartattooGreaterThan(Integer boartattoo, Pageable page);
	public List<Monster> findByBoartattooGreaterThan(Integer boartattoo, Sort sort);
	public List<Monster> findByBody(Boolean body);
	public Page<Monster> findByBody(Boolean body, Pageable page);
	public List<Monster> findByBody(Boolean body, Sort sort);
	public List<Monster> findByBodyguard(Integer bodyguard);
	public Page<Monster> findByBodyguard(Integer bodyguard, Pageable page);
	public List<Monster> findByBodyguard(Integer bodyguard, Sort sort);
	public List<Monster> findByBodyguardLessThan(Integer bodyguard);
	public Page<Monster> findByBodyguardLessThan(Integer bodyguard, Pageable page);
	public List<Monster> findByBodyguardLessThan(Integer bodyguard, Sort sort);
	public List<Monster> findByBodyguardGreaterThan(Integer bodyguard);
	public Page<Monster> findByBodyguardGreaterThan(Integer bodyguard, Pageable page);
	public List<Monster> findByBodyguardGreaterThan(Integer bodyguard, Sort sort);
	public List<Monster> findByBringeroffortune(Integer bringeroffortune);
	public Page<Monster> findByBringeroffortune(Integer bringeroffortune, Pageable page);
	public List<Monster> findByBringeroffortune(Integer bringeroffortune, Sort sort);
	public List<Monster> findByBringeroffortuneLessThan(Integer bringeroffortune);
	public Page<Monster> findByBringeroffortuneLessThan(Integer bringeroffortune, Pageable page);
	public List<Monster> findByBringeroffortuneLessThan(Integer bringeroffortune, Sort sort);
	public List<Monster> findByBringeroffortuneGreaterThan(Integer bringeroffortune);
	public Page<Monster> findByBringeroffortuneGreaterThan(Integer bringeroffortune, Pageable page);
	public List<Monster> findByBringeroffortuneGreaterThan(Integer bringeroffortune, Sort sort);
	public List<Monster> findByBuffer(Boolean buffer);
	public Page<Monster> findByBuffer(Boolean buffer, Pageable page);
	public List<Monster> findByBuffer(Boolean buffer, Sort sort);
	public List<Monster> findByBug(Boolean bug);
	public Page<Monster> findByBug(Boolean bug, Pageable page);
	public List<Monster> findByBug(Boolean bug, Sort sort);
	public List<Monster> findByCaptureslaves(Boolean captureslaves);
	public Page<Monster> findByCaptureslaves(Boolean captureslaves, Pageable page);
	public List<Monster> findByCaptureslaves(Boolean captureslaves, Sort sort);
	public List<Monster> findByCastledef(Integer castledef);
	public Page<Monster> findByCastledef(Integer castledef, Pageable page);
	public List<Monster> findByCastledef(Integer castledef, Sort sort);
	public List<Monster> findByCastledefLessThan(Integer castledef);
	public Page<Monster> findByCastledefLessThan(Integer castledef, Pageable page);
	public List<Monster> findByCastledefLessThan(Integer castledef, Sort sort);
	public List<Monster> findByCastledefGreaterThan(Integer castledef);
	public Page<Monster> findByCastledefGreaterThan(Integer castledef, Pageable page);
	public List<Monster> findByCastledefGreaterThan(Integer castledef, Sort sort);
	public List<Monster> findByCavesurvival(Boolean cavesurvival);
	public Page<Monster> findByCavesurvival(Boolean cavesurvival, Pageable page);
	public List<Monster> findByCavesurvival(Boolean cavesurvival, Sort sort);
	public List<Monster> findByChangetargetgenderforseductionandseductionimmune(Boolean changetargetgenderforseductionandseductionimmune);
	public Page<Monster> findByChangetargetgenderforseductionandseductionimmune(Boolean changetargetgenderforseductionandseductionimmune, Pageable page);
	public List<Monster> findByChangetargetgenderforseductionandseductionimmune(Boolean changetargetgenderforseductionandseductionimmune, Sort sort);
	public List<Monster> findByChaospower(Integer chaospower);
	public Page<Monster> findByChaospower(Integer chaospower, Pageable page);
	public List<Monster> findByChaospower(Integer chaospower, Sort sort);
	public List<Monster> findByChaospowerLessThan(Integer chaospower);
	public Page<Monster> findByChaospowerLessThan(Integer chaospower, Pageable page);
	public List<Monster> findByChaospowerLessThan(Integer chaospower, Sort sort);
	public List<Monster> findByChaospowerGreaterThan(Integer chaospower);
	public Page<Monster> findByChaospowerGreaterThan(Integer chaospower, Pageable page);
	public List<Monster> findByChaospowerGreaterThan(Integer chaospower, Sort sort);
	public List<Monster> findByChaosrec(Integer chaosrec);
	public Page<Monster> findByChaosrec(Integer chaosrec, Pageable page);
	public List<Monster> findByChaosrec(Integer chaosrec, Sort sort);
	public List<Monster> findByChaosrecLessThan(Integer chaosrec);
	public Page<Monster> findByChaosrecLessThan(Integer chaosrec, Pageable page);
	public List<Monster> findByChaosrecLessThan(Integer chaosrec, Sort sort);
	public List<Monster> findByChaosrecGreaterThan(Integer chaosrec);
	public Page<Monster> findByChaosrecGreaterThan(Integer chaosrec, Pageable page);
	public List<Monster> findByChaosrecGreaterThan(Integer chaosrec, Sort sort);
	public List<Monster> findByCleanshape(Boolean cleanshape);
	public Page<Monster> findByCleanshape(Boolean cleanshape, Pageable page);
	public List<Monster> findByCleanshape(Boolean cleanshape, Sort sort);
	public List<Monster> findByClockworklord(Integer clockworklord);
	public Page<Monster> findByClockworklord(Integer clockworklord, Pageable page);
	public List<Monster> findByClockworklord(Integer clockworklord, Sort sort);
	public List<Monster> findByClockworklordLessThan(Integer clockworklord);
	public Page<Monster> findByClockworklordLessThan(Integer clockworklord, Pageable page);
	public List<Monster> findByClockworklordLessThan(Integer clockworklord, Sort sort);
	public List<Monster> findByClockworklordGreaterThan(Integer clockworklord);
	public Page<Monster> findByClockworklordGreaterThan(Integer clockworklord, Pageable page);
	public List<Monster> findByClockworklordGreaterThan(Integer clockworklord, Sort sort);
	public List<Monster> findByCold(Integer cold);
	public Page<Monster> findByCold(Integer cold, Pageable page);
	public List<Monster> findByCold(Integer cold, Sort sort);
	public List<Monster> findByColdLessThan(Integer cold);
	public Page<Monster> findByColdLessThan(Integer cold, Pageable page);
	public List<Monster> findByColdLessThan(Integer cold, Sort sort);
	public List<Monster> findByColdGreaterThan(Integer cold);
	public Page<Monster> findByColdGreaterThan(Integer cold, Pageable page);
	public List<Monster> findByColdGreaterThan(Integer cold, Sort sort);
	public List<Monster> findByColdblood(Boolean coldblood);
	public Page<Monster> findByColdblood(Boolean coldblood, Pageable page);
	public List<Monster> findByColdblood(Boolean coldblood, Sort sort);
	public List<Monster> findByColdpower(Integer coldpower);
	public Page<Monster> findByColdpower(Integer coldpower, Pageable page);
	public List<Monster> findByColdpower(Integer coldpower, Sort sort);
	public List<Monster> findByColdpowerLessThan(Integer coldpower);
	public Page<Monster> findByColdpowerLessThan(Integer coldpower, Pageable page);
	public List<Monster> findByColdpowerLessThan(Integer coldpower, Sort sort);
	public List<Monster> findByColdpowerGreaterThan(Integer coldpower);
	public Page<Monster> findByColdpowerGreaterThan(Integer coldpower, Pageable page);
	public List<Monster> findByColdpowerGreaterThan(Integer coldpower, Sort sort);
	public List<Monster> findByColdrec(Boolean coldrec);
	public Page<Monster> findByColdrec(Boolean coldrec, Pageable page);
	public List<Monster> findByColdrec(Boolean coldrec, Sort sort);
	public List<Monster> findByColdres(Integer coldres);
	public Page<Monster> findByColdres(Integer coldres, Pageable page);
	public List<Monster> findByColdres(Integer coldres, Sort sort);
	public List<Monster> findByColdresLessThan(Integer coldres);
	public Page<Monster> findByColdresLessThan(Integer coldres, Pageable page);
	public List<Monster> findByColdresLessThan(Integer coldres, Sort sort);
	public List<Monster> findByColdresGreaterThan(Integer coldres);
	public Page<Monster> findByColdresGreaterThan(Integer coldres, Pageable page);
	public List<Monster> findByColdresGreaterThan(Integer coldres, Sort sort);
	public List<Monster> findByColdsummon(Integer coldsummon);
	public Page<Monster> findByColdsummon(Integer coldsummon, Pageable page);
	public List<Monster> findByColdsummon(Integer coldsummon, Sort sort);
	public List<Monster> findByColdsummonLessThan(Integer coldsummon);
	public Page<Monster> findByColdsummonLessThan(Integer coldsummon, Pageable page);
	public List<Monster> findByColdsummonLessThan(Integer coldsummon, Sort sort);
	public List<Monster> findByColdsummonGreaterThan(Integer coldsummon);
	public Page<Monster> findByColdsummonGreaterThan(Integer coldsummon, Pageable page);
	public List<Monster> findByColdsummonGreaterThan(Integer coldsummon, Sort sort);
	public List<Monster> findByCombatcaster(Boolean combatcaster);
	public Page<Monster> findByCombatcaster(Boolean combatcaster, Pageable page);
	public List<Monster> findByCombatcaster(Boolean combatcaster, Sort sort);
	public List<Monster> findByCommaster(Boolean commaster);
	public Page<Monster> findByCommaster(Boolean commaster, Pageable page);
	public List<Monster> findByCommaster(Boolean commaster, Sort sort);
	public List<Monster> findByComslave(Boolean comslave);
	public Page<Monster> findByComslave(Boolean comslave, Pageable page);
	public List<Monster> findByComslave(Boolean comslave, Sort sort);
	public List<Monster> findByCorpseconstruct(Boolean corpseconstruct);
	public Page<Monster> findByCorpseconstruct(Boolean corpseconstruct, Pageable page);
	public List<Monster> findByCorpseconstruct(Boolean corpseconstruct, Sort sort);
	public List<Monster> findByCorpseeater(Integer corpseeater);
	public Page<Monster> findByCorpseeater(Integer corpseeater, Pageable page);
	public List<Monster> findByCorpseeater(Integer corpseeater, Sort sort);
	public List<Monster> findByCorpseeaterLessThan(Integer corpseeater);
	public Page<Monster> findByCorpseeaterLessThan(Integer corpseeater, Pageable page);
	public List<Monster> findByCorpseeaterLessThan(Integer corpseeater, Sort sort);
	public List<Monster> findByCorpseeaterGreaterThan(Integer corpseeater);
	public Page<Monster> findByCorpseeaterGreaterThan(Integer corpseeater, Pageable page);
	public List<Monster> findByCorpseeaterGreaterThan(Integer corpseeater, Sort sort);
	public List<Monster> findByCorrupt(Boolean corrupt);
	public Page<Monster> findByCorrupt(Boolean corrupt, Pageable page);
	public List<Monster> findByCorrupt(Boolean corrupt, Sort sort);
	public List<Monster> findByCrossbreeder(Integer crossbreeder);
	public Page<Monster> findByCrossbreeder(Integer crossbreeder, Pageable page);
	public List<Monster> findByCrossbreeder(Integer crossbreeder, Sort sort);
	public List<Monster> findByCrossbreederLessThan(Integer crossbreeder);
	public Page<Monster> findByCrossbreederLessThan(Integer crossbreeder, Pageable page);
	public List<Monster> findByCrossbreederLessThan(Integer crossbreeder, Sort sort);
	public List<Monster> findByCrossbreederGreaterThan(Integer crossbreeder);
	public Page<Monster> findByCrossbreederGreaterThan(Integer crossbreeder, Pageable page);
	public List<Monster> findByCrossbreederGreaterThan(Integer crossbreeder, Sort sort);
	public List<Monster> findByCurseattacker(Integer curseattacker);
	public Page<Monster> findByCurseattacker(Integer curseattacker, Pageable page);
	public List<Monster> findByCurseattacker(Integer curseattacker, Sort sort);
	public List<Monster> findByCurseattackerLessThan(Integer curseattacker);
	public Page<Monster> findByCurseattackerLessThan(Integer curseattacker, Pageable page);
	public List<Monster> findByCurseattackerLessThan(Integer curseattacker, Sort sort);
	public List<Monster> findByCurseattackerGreaterThan(Integer curseattacker);
	public Page<Monster> findByCurseattackerGreaterThan(Integer curseattacker, Pageable page);
	public List<Monster> findByCurseattackerGreaterThan(Integer curseattacker, Sort sort);
	public List<Monster> findByD(Integer d);
	public Page<Monster> findByD(Integer d, Pageable page);
	public List<Monster> findByD(Integer d, Sort sort);
	public List<Monster> findByDLessThan(Integer d);
	public Page<Monster> findByDLessThan(Integer d, Pageable page);
	public List<Monster> findByDLessThan(Integer d, Sort sort);
	public List<Monster> findByDGreaterThan(Integer d);
	public Page<Monster> findByDGreaterThan(Integer d, Pageable page);
	public List<Monster> findByDGreaterThan(Integer d, Sort sort);
	public List<Monster> findByDamagerev(Integer damagerev);
	public Page<Monster> findByDamagerev(Integer damagerev, Pageable page);
	public List<Monster> findByDamagerev(Integer damagerev, Sort sort);
	public List<Monster> findByDamagerevLessThan(Integer damagerev);
	public Page<Monster> findByDamagerevLessThan(Integer damagerev, Pageable page);
	public List<Monster> findByDamagerevLessThan(Integer damagerev, Sort sort);
	public List<Monster> findByDamagerevGreaterThan(Integer damagerev);
	public Page<Monster> findByDamagerevGreaterThan(Integer damagerev, Pageable page);
	public List<Monster> findByDamagerevGreaterThan(Integer damagerev, Sort sort);
	public List<Monster> findByDarkpower(Integer darkpower);
	public Page<Monster> findByDarkpower(Integer darkpower, Pageable page);
	public List<Monster> findByDarkpower(Integer darkpower, Sort sort);
	public List<Monster> findByDarkpowerLessThan(Integer darkpower);
	public Page<Monster> findByDarkpowerLessThan(Integer darkpower, Pageable page);
	public List<Monster> findByDarkpowerLessThan(Integer darkpower, Sort sort);
	public List<Monster> findByDarkpowerGreaterThan(Integer darkpower);
	public Page<Monster> findByDarkpowerGreaterThan(Integer darkpower, Pageable page);
	public List<Monster> findByDarkpowerGreaterThan(Integer darkpower, Sort sort);
	public List<Monster> findByDarkvision(Integer darkvision);
	public Page<Monster> findByDarkvision(Integer darkvision, Pageable page);
	public List<Monster> findByDarkvision(Integer darkvision, Sort sort);
	public List<Monster> findByDarkvisionLessThan(Integer darkvision);
	public Page<Monster> findByDarkvisionLessThan(Integer darkvision, Pageable page);
	public List<Monster> findByDarkvisionLessThan(Integer darkvision, Sort sort);
	public List<Monster> findByDarkvisionGreaterThan(Integer darkvision);
	public Page<Monster> findByDarkvisionGreaterThan(Integer darkvision, Pageable page);
	public List<Monster> findByDarkvisionGreaterThan(Integer darkvision, Sort sort);
	public List<Monster> findByDeathattuned(Integer deathattuned);
	public Page<Monster> findByDeathattuned(Integer deathattuned, Pageable page);
	public List<Monster> findByDeathattuned(Integer deathattuned, Sort sort);
	public List<Monster> findByDeathattunedLessThan(Integer deathattuned);
	public Page<Monster> findByDeathattunedLessThan(Integer deathattuned, Pageable page);
	public List<Monster> findByDeathattunedLessThan(Integer deathattuned, Sort sort);
	public List<Monster> findByDeathattunedGreaterThan(Integer deathattuned);
	public Page<Monster> findByDeathattunedGreaterThan(Integer deathattuned, Pageable page);
	public List<Monster> findByDeathattunedGreaterThan(Integer deathattuned, Sort sort);
	public List<Monster> findByDeathcurse(Boolean deathcurse);
	public Page<Monster> findByDeathcurse(Boolean deathcurse, Pageable page);
	public List<Monster> findByDeathcurse(Boolean deathcurse, Sort sort);
	public List<Monster> findByDeathwail(Integer deathwail);
	public Page<Monster> findByDeathwail(Integer deathwail, Pageable page);
	public List<Monster> findByDeathwail(Integer deathwail, Sort sort);
	public List<Monster> findByDeathwailLessThan(Integer deathwail);
	public Page<Monster> findByDeathwailLessThan(Integer deathwail, Pageable page);
	public List<Monster> findByDeathwailLessThan(Integer deathwail, Sort sort);
	public List<Monster> findByDeathwailGreaterThan(Integer deathwail);
	public Page<Monster> findByDeathwailGreaterThan(Integer deathwail, Pageable page);
	public List<Monster> findByDeathwailGreaterThan(Integer deathwail, Sort sort);
	public List<Monster> findByDef(Integer def);
	public Page<Monster> findByDef(Integer def, Pageable page);
	public List<Monster> findByDef(Integer def, Sort sort);
	public List<Monster> findByDefLessThan(Integer def);
	public Page<Monster> findByDefLessThan(Integer def, Pageable page);
	public List<Monster> findByDefLessThan(Integer def, Sort sort);
	public List<Monster> findByDefGreaterThan(Integer def);
	public Page<Monster> findByDefGreaterThan(Integer def, Pageable page);
	public List<Monster> findByDefGreaterThan(Integer def, Sort sort);
	public List<Monster> findByDefenceorganiser(Integer defenceorganiser);
	public Page<Monster> findByDefenceorganiser(Integer defenceorganiser, Pageable page);
	public List<Monster> findByDefenceorganiser(Integer defenceorganiser, Sort sort);
	public List<Monster> findByDefenceorganiserLessThan(Integer defenceorganiser);
	public Page<Monster> findByDefenceorganiserLessThan(Integer defenceorganiser, Pageable page);
	public List<Monster> findByDefenceorganiserLessThan(Integer defenceorganiser, Sort sort);
	public List<Monster> findByDefenceorganiserGreaterThan(Integer defenceorganiser);
	public Page<Monster> findByDefenceorganiserGreaterThan(Integer defenceorganiser, Pageable page);
	public List<Monster> findByDefenceorganiserGreaterThan(Integer defenceorganiser, Sort sort);
	public List<Monster> findByDemon(Boolean demon);
	public Page<Monster> findByDemon(Boolean demon, Pageable page);
	public List<Monster> findByDemon(Boolean demon, Sort sort);
	public List<Monster> findByDigest(Integer digest);
	public Page<Monster> findByDigest(Integer digest, Pageable page);
	public List<Monster> findByDigest(Integer digest, Sort sort);
	public List<Monster> findByDigestLessThan(Integer digest);
	public Page<Monster> findByDigestLessThan(Integer digest, Pageable page);
	public List<Monster> findByDigestLessThan(Integer digest, Sort sort);
	public List<Monster> findByDigestGreaterThan(Integer digest);
	public Page<Monster> findByDigestGreaterThan(Integer digest, Pageable page);
	public List<Monster> findByDigestGreaterThan(Integer digest, Sort sort);
	public List<Monster> findByDisbel(Boolean disbel);
	public Page<Monster> findByDisbel(Boolean disbel, Pageable page);
	public List<Monster> findByDisbel(Boolean disbel, Sort sort);
	public List<Monster> findByDisbelieveillusions(Integer disbelieveillusions);
	public Page<Monster> findByDisbelieveillusions(Integer disbelieveillusions, Pageable page);
	public List<Monster> findByDisbelieveillusions(Integer disbelieveillusions, Sort sort);
	public List<Monster> findByDisbelieveillusionsLessThan(Integer disbelieveillusions);
	public Page<Monster> findByDisbelieveillusionsLessThan(Integer disbelieveillusions, Pageable page);
	public List<Monster> findByDisbelieveillusionsLessThan(Integer disbelieveillusions, Sort sort);
	public List<Monster> findByDisbelieveillusionsGreaterThan(Integer disbelieveillusions);
	public Page<Monster> findByDisbelieveillusionsGreaterThan(Integer disbelieveillusions, Pageable page);
	public List<Monster> findByDisbelieveillusionsGreaterThan(Integer disbelieveillusions, Sort sort);
	public List<Monster> findByDiseasecloud(Integer diseasecloud);
	public Page<Monster> findByDiseasecloud(Integer diseasecloud, Pageable page);
	public List<Monster> findByDiseasecloud(Integer diseasecloud, Sort sort);
	public List<Monster> findByDiseasecloudLessThan(Integer diseasecloud);
	public Page<Monster> findByDiseasecloudLessThan(Integer diseasecloud, Pageable page);
	public List<Monster> findByDiseasecloudLessThan(Integer diseasecloud, Sort sort);
	public List<Monster> findByDiseasecloudGreaterThan(Integer diseasecloud);
	public Page<Monster> findByDiseasecloudGreaterThan(Integer diseasecloud, Pageable page);
	public List<Monster> findByDiseasecloudGreaterThan(Integer diseasecloud, Sort sort);
	public List<Monster> findByDisres(Integer disres);
	public Page<Monster> findByDisres(Integer disres, Pageable page);
	public List<Monster> findByDisres(Integer disres, Sort sort);
	public List<Monster> findByDisresLessThan(Integer disres);
	public Page<Monster> findByDisresLessThan(Integer disres, Pageable page);
	public List<Monster> findByDisresLessThan(Integer disres, Sort sort);
	public List<Monster> findByDisresGreaterThan(Integer disres);
	public Page<Monster> findByDisresGreaterThan(Integer disres, Pageable page);
	public List<Monster> findByDisresGreaterThan(Integer disres, Sort sort);
	public List<Monster> findByDivineins(Boolean divineins);
	public Page<Monster> findByDivineins(Boolean divineins, Pageable page);
	public List<Monster> findByDivineins(Boolean divineins, Sort sort);
	public List<Monster> findByDomimmortal(Boolean domimmortal);
	public Page<Monster> findByDomimmortal(Boolean domimmortal, Pageable page);
	public List<Monster> findByDomimmortal(Boolean domimmortal, Sort sort);
	public List<Monster> findByDomsummon1(Boolean domsummon1);
	public Page<Monster> findByDomsummon1(Boolean domsummon1, Pageable page);
	public List<Monster> findByDomsummon1(Boolean domsummon1, Sort sort);
	public List<Monster> findByDomsummon2(Boolean domsummon2);
	public Page<Monster> findByDomsummon2(Boolean domsummon2, Pageable page);
	public List<Monster> findByDomsummon2(Boolean domsummon2, Sort sort);
	public List<Monster> findByDouse(Integer douse);
	public Page<Monster> findByDouse(Integer douse, Pageable page);
	public List<Monster> findByDouse(Integer douse, Sort sort);
	public List<Monster> findByDouseLessThan(Integer douse);
	public Page<Monster> findByDouseLessThan(Integer douse, Pageable page);
	public List<Monster> findByDouseLessThan(Integer douse, Sort sort);
	public List<Monster> findByDouseGreaterThan(Integer douse);
	public Page<Monster> findByDouseGreaterThan(Integer douse, Pageable page);
	public List<Monster> findByDouseGreaterThan(Integer douse, Sort sort);
	public List<Monster> findByDragonmastery(Boolean dragonmastery);
	public Page<Monster> findByDragonmastery(Boolean dragonmastery, Pageable page);
	public List<Monster> findByDragonmastery(Boolean dragonmastery, Sort sort);
	public List<Monster> findByDrainimmune(Boolean drainimmune);
	public Page<Monster> findByDrainimmune(Boolean drainimmune, Pageable page);
	public List<Monster> findByDrainimmune(Boolean drainimmune, Sort sort);
	public List<Monster> findByDrake(Boolean drake);
	public Page<Monster> findByDrake(Boolean drake, Pageable page);
	public List<Monster> findByDrake(Boolean drake, Sort sort);
	public List<Monster> findByDreanimator(Integer dreanimator);
	public Page<Monster> findByDreanimator(Integer dreanimator, Pageable page);
	public List<Monster> findByDreanimator(Integer dreanimator, Sort sort);
	public List<Monster> findByDreanimatorLessThan(Integer dreanimator);
	public Page<Monster> findByDreanimatorLessThan(Integer dreanimator, Pageable page);
	public List<Monster> findByDreanimatorLessThan(Integer dreanimator, Sort sort);
	public List<Monster> findByDreanimatorGreaterThan(Integer dreanimator);
	public Page<Monster> findByDreanimatorGreaterThan(Integer dreanimator, Pageable page);
	public List<Monster> findByDreanimatorGreaterThan(Integer dreanimator, Sort sort);
	public List<Monster> findByE(Integer e);
	public Page<Monster> findByE(Integer e, Pageable page);
	public List<Monster> findByE(Integer e, Sort sort);
	public List<Monster> findByELessThan(Integer e);
	public Page<Monster> findByELessThan(Integer e, Pageable page);
	public List<Monster> findByELessThan(Integer e, Sort sort);
	public List<Monster> findByEGreaterThan(Integer e);
	public Page<Monster> findByEGreaterThan(Integer e, Pageable page);
	public List<Monster> findByEGreaterThan(Integer e, Sort sort);
	public List<Monster> findByEarthattuned(Integer earthattuned);
	public Page<Monster> findByEarthattuned(Integer earthattuned, Pageable page);
	public List<Monster> findByEarthattuned(Integer earthattuned, Sort sort);
	public List<Monster> findByEarthattunedLessThan(Integer earthattuned);
	public Page<Monster> findByEarthattunedLessThan(Integer earthattuned, Pageable page);
	public List<Monster> findByEarthattunedLessThan(Integer earthattuned, Sort sort);
	public List<Monster> findByEarthattunedGreaterThan(Integer earthattuned);
	public Page<Monster> findByEarthattunedGreaterThan(Integer earthattuned, Pageable page);
	public List<Monster> findByEarthattunedGreaterThan(Integer earthattuned, Sort sort);
	public List<Monster> findByElegist(Integer elegist);
	public Page<Monster> findByElegist(Integer elegist, Pageable page);
	public List<Monster> findByElegist(Integer elegist, Sort sort);
	public List<Monster> findByElegistLessThan(Integer elegist);
	public Page<Monster> findByElegistLessThan(Integer elegist, Pageable page);
	public List<Monster> findByElegistLessThan(Integer elegist, Sort sort);
	public List<Monster> findByElegistGreaterThan(Integer elegist);
	public Page<Monster> findByElegistGreaterThan(Integer elegist, Pageable page);
	public List<Monster> findByElegistGreaterThan(Integer elegist, Sort sort);
	public List<Monster> findByElementrange(Boolean elementrange);
	public Page<Monster> findByElementrange(Boolean elementrange, Pageable page);
	public List<Monster> findByElementrange(Boolean elementrange, Sort sort);
	public List<Monster> findByEnc(Integer enc);
	public Page<Monster> findByEnc(Integer enc, Pageable page);
	public List<Monster> findByEnc(Integer enc, Sort sort);
	public List<Monster> findByEncLessThan(Integer enc);
	public Page<Monster> findByEncLessThan(Integer enc, Pageable page);
	public List<Monster> findByEncLessThan(Integer enc, Sort sort);
	public List<Monster> findByEncGreaterThan(Integer enc);
	public Page<Monster> findByEncGreaterThan(Integer enc, Pageable page);
	public List<Monster> findByEncGreaterThan(Integer enc, Sort sort);
	public List<Monster> findByEnchrebate50(Integer enchrebate50);
	public Page<Monster> findByEnchrebate50(Integer enchrebate50, Pageable page);
	public List<Monster> findByEnchrebate50(Integer enchrebate50, Sort sort);
	public List<Monster> findByEnchrebate50LessThan(Integer enchrebate50);
	public Page<Monster> findByEnchrebate50LessThan(Integer enchrebate50, Pageable page);
	public List<Monster> findByEnchrebate50LessThan(Integer enchrebate50, Sort sort);
	public List<Monster> findByEnchrebate50GreaterThan(Integer enchrebate50);
	public Page<Monster> findByEnchrebate50GreaterThan(Integer enchrebate50, Pageable page);
	public List<Monster> findByEnchrebate50GreaterThan(Integer enchrebate50, Sort sort);
	public List<Monster> findByEnd(Boolean end);
	public Page<Monster> findByEnd(Boolean end, Pageable page);
	public List<Monster> findByEnd(Boolean end, Sort sort);
	public List<Monster> findByEthereal(Boolean ethereal);
	public Page<Monster> findByEthereal(Boolean ethereal, Pageable page);
	public List<Monster> findByEthereal(Boolean ethereal, Sort sort);
	public List<Monster> findByEthtrue(Boolean ethtrue);
	public Page<Monster> findByEthtrue(Boolean ethtrue, Pageable page);
	public List<Monster> findByEthtrue(Boolean ethtrue, Sort sort);
	public List<Monster> findByEvent(Boolean event);
	public Page<Monster> findByEvent(Boolean event, Pageable page);
	public List<Monster> findByEvent(Boolean event, Sort sort);
	public List<Monster> findByExplodeondeath(Integer explodeondeath);
	public Page<Monster> findByExplodeondeath(Integer explodeondeath, Pageable page);
	public List<Monster> findByExplodeondeath(Integer explodeondeath, Sort sort);
	public List<Monster> findByExplodeondeathLessThan(Integer explodeondeath);
	public Page<Monster> findByExplodeondeathLessThan(Integer explodeondeath, Pageable page);
	public List<Monster> findByExplodeondeathLessThan(Integer explodeondeath, Sort sort);
	public List<Monster> findByExplodeondeathGreaterThan(Integer explodeondeath);
	public Page<Monster> findByExplodeondeathGreaterThan(Integer explodeondeath, Pageable page);
	public List<Monster> findByExplodeondeathGreaterThan(Integer explodeondeath, Sort sort);
	public List<Monster> findByEyeloss(Boolean eyeloss);
	public Page<Monster> findByEyeloss(Boolean eyeloss, Pageable page);
	public List<Monster> findByEyeloss(Boolean eyeloss, Sort sort);
	public List<Monster> findByEyes(Integer eyes);
	public Page<Monster> findByEyes(Integer eyes, Pageable page);
	public List<Monster> findByEyes(Integer eyes, Sort sort);
	public List<Monster> findByEyesLessThan(Integer eyes);
	public Page<Monster> findByEyesLessThan(Integer eyes, Pageable page);
	public List<Monster> findByEyesLessThan(Integer eyes, Sort sort);
	public List<Monster> findByEyesGreaterThan(Integer eyes);
	public Page<Monster> findByEyesGreaterThan(Integer eyes, Pageable page);
	public List<Monster> findByEyesGreaterThan(Integer eyes, Sort sort);
	public List<Monster> findByF(Integer f);
	public Page<Monster> findByF(Integer f, Pageable page);
	public List<Monster> findByF(Integer f, Sort sort);
	public List<Monster> findByFLessThan(Integer f);
	public Page<Monster> findByFLessThan(Integer f, Pageable page);
	public List<Monster> findByFLessThan(Integer f, Sort sort);
	public List<Monster> findByFGreaterThan(Integer f);
	public Page<Monster> findByFGreaterThan(Integer f, Pageable page);
	public List<Monster> findByFGreaterThan(Integer f, Sort sort);
	public List<Monster> findByFallpower(Integer fallpower);
	public Page<Monster> findByFallpower(Integer fallpower, Pageable page);
	public List<Monster> findByFallpower(Integer fallpower, Sort sort);
	public List<Monster> findByFallpowerLessThan(Integer fallpower);
	public Page<Monster> findByFallpowerLessThan(Integer fallpower, Pageable page);
	public List<Monster> findByFallpowerLessThan(Integer fallpower, Sort sort);
	public List<Monster> findByFallpowerGreaterThan(Integer fallpower);
	public Page<Monster> findByFallpowerGreaterThan(Integer fallpower, Pageable page);
	public List<Monster> findByFallpowerGreaterThan(Integer fallpower, Sort sort);
	public List<Monster> findByFear(Integer fear);
	public Page<Monster> findByFear(Integer fear, Pageable page);
	public List<Monster> findByFear(Integer fear, Sort sort);
	public List<Monster> findByFearLessThan(Integer fear);
	public Page<Monster> findByFearLessThan(Integer fear, Pageable page);
	public List<Monster> findByFearLessThan(Integer fear, Sort sort);
	public List<Monster> findByFearGreaterThan(Integer fear);
	public Page<Monster> findByFearGreaterThan(Integer fear, Pageable page);
	public List<Monster> findByFearGreaterThan(Integer fear, Sort sort);
	public List<Monster> findByFemale(Boolean female);
	public Page<Monster> findByFemale(Boolean female, Pageable page);
	public List<Monster> findByFemale(Boolean female, Sort sort);
	public List<Monster> findByFireattuned(Integer fireattuned);
	public Page<Monster> findByFireattuned(Integer fireattuned, Pageable page);
	public List<Monster> findByFireattuned(Integer fireattuned, Sort sort);
	public List<Monster> findByFireattunedLessThan(Integer fireattuned);
	public Page<Monster> findByFireattunedLessThan(Integer fireattuned, Pageable page);
	public List<Monster> findByFireattunedLessThan(Integer fireattuned, Sort sort);
	public List<Monster> findByFireattunedGreaterThan(Integer fireattuned);
	public Page<Monster> findByFireattunedGreaterThan(Integer fireattuned, Pageable page);
	public List<Monster> findByFireattunedGreaterThan(Integer fireattuned, Sort sort);
	public List<Monster> findByFirepower(Integer firepower);
	public Page<Monster> findByFirepower(Integer firepower, Pageable page);
	public List<Monster> findByFirepower(Integer firepower, Sort sort);
	public List<Monster> findByFirepowerLessThan(Integer firepower);
	public Page<Monster> findByFirepowerLessThan(Integer firepower, Pageable page);
	public List<Monster> findByFirepowerLessThan(Integer firepower, Sort sort);
	public List<Monster> findByFirepowerGreaterThan(Integer firepower);
	public Page<Monster> findByFirepowerGreaterThan(Integer firepower, Pageable page);
	public List<Monster> findByFirepowerGreaterThan(Integer firepower, Sort sort);
	public List<Monster> findByFirerange(Integer firerange);
	public Page<Monster> findByFirerange(Integer firerange, Pageable page);
	public List<Monster> findByFirerange(Integer firerange, Sort sort);
	public List<Monster> findByFirerangeLessThan(Integer firerange);
	public Page<Monster> findByFirerangeLessThan(Integer firerange, Pageable page);
	public List<Monster> findByFirerangeLessThan(Integer firerange, Sort sort);
	public List<Monster> findByFirerangeGreaterThan(Integer firerange);
	public Page<Monster> findByFirerangeGreaterThan(Integer firerange, Pageable page);
	public List<Monster> findByFirerangeGreaterThan(Integer firerange, Sort sort);
	public List<Monster> findByFireres(Integer fireres);
	public Page<Monster> findByFireres(Integer fireres, Pageable page);
	public List<Monster> findByFireres(Integer fireres, Sort sort);
	public List<Monster> findByFireresLessThan(Integer fireres);
	public Page<Monster> findByFireresLessThan(Integer fireres, Pageable page);
	public List<Monster> findByFireresLessThan(Integer fireres, Sort sort);
	public List<Monster> findByFireresGreaterThan(Integer fireres);
	public Page<Monster> findByFireresGreaterThan(Integer fireres, Pageable page);
	public List<Monster> findByFireresGreaterThan(Integer fireres, Sort sort);
	public List<Monster> findByFireshield(Integer fireshield);
	public Page<Monster> findByFireshield(Integer fireshield, Pageable page);
	public List<Monster> findByFireshield(Integer fireshield, Sort sort);
	public List<Monster> findByFireshieldLessThan(Integer fireshield);
	public Page<Monster> findByFireshieldLessThan(Integer fireshield, Pageable page);
	public List<Monster> findByFireshieldLessThan(Integer fireshield, Sort sort);
	public List<Monster> findByFireshieldGreaterThan(Integer fireshield);
	public Page<Monster> findByFireshieldGreaterThan(Integer fireshield, Pageable page);
	public List<Monster> findByFireshieldGreaterThan(Integer fireshield, Sort sort);
	public List<Monster> findByFirstshape(Integer firstshape);
	public Page<Monster> findByFirstshape(Integer firstshape, Pageable page);
	public List<Monster> findByFirstshape(Integer firstshape, Sort sort);
	public List<Monster> findByFirstshapeLessThan(Integer firstshape);
	public Page<Monster> findByFirstshapeLessThan(Integer firstshape, Pageable page);
	public List<Monster> findByFirstshapeLessThan(Integer firstshape, Sort sort);
	public List<Monster> findByFirstshapeGreaterThan(Integer firstshape);
	public Page<Monster> findByFirstshapeGreaterThan(Integer firstshape, Pageable page);
	public List<Monster> findByFirstshapeGreaterThan(Integer firstshape, Sort sort);
	public List<Monster> findByFixedname(String fixedname);
	public Page<Monster> findByFixedname(String fixedname, Pageable page);
	public List<Monster> findByFixedname(String fixedname, Sort sort);
	public List<Monster> findByFixedresearch(Integer fixedresearch);
	public Page<Monster> findByFixedresearch(Integer fixedresearch, Pageable page);
	public List<Monster> findByFixedresearch(Integer fixedresearch, Sort sort);
	public List<Monster> findByFixedresearchLessThan(Integer fixedresearch);
	public Page<Monster> findByFixedresearchLessThan(Integer fixedresearch, Pageable page);
	public List<Monster> findByFixedresearchLessThan(Integer fixedresearch, Sort sort);
	public List<Monster> findByFixedresearchGreaterThan(Integer fixedresearch);
	public Page<Monster> findByFixedresearchGreaterThan(Integer fixedresearch, Pageable page);
	public List<Monster> findByFixedresearchGreaterThan(Integer fixedresearch, Sort sort);
	public List<Monster> findByFixforgebonus(Integer fixforgebonus);
	public Page<Monster> findByFixforgebonus(Integer fixforgebonus, Pageable page);
	public List<Monster> findByFixforgebonus(Integer fixforgebonus, Sort sort);
	public List<Monster> findByFixforgebonusLessThan(Integer fixforgebonus);
	public Page<Monster> findByFixforgebonusLessThan(Integer fixforgebonus, Pageable page);
	public List<Monster> findByFixforgebonusLessThan(Integer fixforgebonus, Sort sort);
	public List<Monster> findByFixforgebonusGreaterThan(Integer fixforgebonus);
	public Page<Monster> findByFixforgebonusGreaterThan(Integer fixforgebonus, Pageable page);
	public List<Monster> findByFixforgebonusGreaterThan(Integer fixforgebonus, Sort sort);
	public List<Monster> findByFlieswhenblessed(Boolean flieswhenblessed);
	public Page<Monster> findByFlieswhenblessed(Boolean flieswhenblessed, Pageable page);
	public List<Monster> findByFlieswhenblessed(Boolean flieswhenblessed, Sort sort);
	public List<Monster> findByFloatValue(Boolean float_);
	public Page<Monster> findByFloatValue(Boolean float_, Pageable page);
	public List<Monster> findByFloatValue(Boolean float_, Sort sort);
	public List<Monster> findByFlying(Boolean flying);
	public Page<Monster> findByFlying(Boolean flying, Pageable page);
	public List<Monster> findByFlying(Boolean flying, Sort sort);
	public List<Monster> findByFoot(Boolean foot);
	public Page<Monster> findByFoot(Boolean foot, Pageable page);
	public List<Monster> findByFoot(Boolean foot, Sort sort);
	public List<Monster> findByForeignmagicboost(Integer foreignmagicboost);
	public Page<Monster> findByForeignmagicboost(Integer foreignmagicboost, Pageable page);
	public List<Monster> findByForeignmagicboost(Integer foreignmagicboost, Sort sort);
	public List<Monster> findByForeignmagicboostLessThan(Integer foreignmagicboost);
	public Page<Monster> findByForeignmagicboostLessThan(Integer foreignmagicboost, Pageable page);
	public List<Monster> findByForeignmagicboostLessThan(Integer foreignmagicboost, Sort sort);
	public List<Monster> findByForeignmagicboostGreaterThan(Integer foreignmagicboost);
	public Page<Monster> findByForeignmagicboostGreaterThan(Integer foreignmagicboost, Pageable page);
	public List<Monster> findByForeignmagicboostGreaterThan(Integer foreignmagicboost, Sort sort);
	public List<Monster> findByForestshape(Integer forestshape);
	public Page<Monster> findByForestshape(Integer forestshape, Pageable page);
	public List<Monster> findByForestshape(Integer forestshape, Sort sort);
	public List<Monster> findByForestshapeLessThan(Integer forestshape);
	public Page<Monster> findByForestshapeLessThan(Integer forestshape, Pageable page);
	public List<Monster> findByForestshapeLessThan(Integer forestshape, Sort sort);
	public List<Monster> findByForestshapeGreaterThan(Integer forestshape);
	public Page<Monster> findByForestshapeGreaterThan(Integer forestshape, Pageable page);
	public List<Monster> findByForestshapeGreaterThan(Integer forestshape, Sort sort);
	public List<Monster> findByForestsurvival(Boolean forestsurvival);
	public Page<Monster> findByForestsurvival(Boolean forestsurvival, Pageable page);
	public List<Monster> findByForestsurvival(Boolean forestsurvival, Sort sort);
	public List<Monster> findByForgebonus(Integer forgebonus);
	public Page<Monster> findByForgebonus(Integer forgebonus, Pageable page);
	public List<Monster> findByForgebonus(Integer forgebonus, Sort sort);
	public List<Monster> findByForgebonusLessThan(Integer forgebonus);
	public Page<Monster> findByForgebonusLessThan(Integer forgebonus, Pageable page);
	public List<Monster> findByForgebonusLessThan(Integer forgebonus, Sort sort);
	public List<Monster> findByForgebonusGreaterThan(Integer forgebonus);
	public Page<Monster> findByForgebonusGreaterThan(Integer forgebonus, Pageable page);
	public List<Monster> findByForgebonusGreaterThan(Integer forgebonus, Sort sort);
	public List<Monster> findByFormationfighter(Integer formationfighter);
	public Page<Monster> findByFormationfighter(Integer formationfighter, Pageable page);
	public List<Monster> findByFormationfighter(Integer formationfighter, Sort sort);
	public List<Monster> findByFormationfighterLessThan(Integer formationfighter);
	public Page<Monster> findByFormationfighterLessThan(Integer formationfighter, Pageable page);
	public List<Monster> findByFormationfighterLessThan(Integer formationfighter, Sort sort);
	public List<Monster> findByFormationfighterGreaterThan(Integer formationfighter);
	public Page<Monster> findByFormationfighterGreaterThan(Integer formationfighter, Pageable page);
	public List<Monster> findByFormationfighterGreaterThan(Integer formationfighter, Sort sort);
	public List<Monster> findByFortkill(Integer fortkill);
	public Page<Monster> findByFortkill(Integer fortkill, Pageable page);
	public List<Monster> findByFortkill(Integer fortkill, Sort sort);
	public List<Monster> findByFortkillLessThan(Integer fortkill);
	public Page<Monster> findByFortkillLessThan(Integer fortkill, Pageable page);
	public List<Monster> findByFortkillLessThan(Integer fortkill, Sort sort);
	public List<Monster> findByFortkillGreaterThan(Integer fortkill);
	public Page<Monster> findByFortkillGreaterThan(Integer fortkill, Pageable page);
	public List<Monster> findByFortkillGreaterThan(Integer fortkill, Sort sort);
	public List<Monster> findByGem(Boolean gem);
	public Page<Monster> findByGem(Boolean gem, Pageable page);
	public List<Monster> findByGem(Boolean gem, Sort sort);
	public List<Monster> findByGemprod(String gemprod);
	public Page<Monster> findByGemprod(String gemprod, Pageable page);
	public List<Monster> findByGemprod(String gemprod, Sort sort);
	public List<Monster> findByGrowhp(Integer growhp);
	public Page<Monster> findByGrowhp(Integer growhp, Pageable page);
	public List<Monster> findByGrowhp(Integer growhp, Sort sort);
	public List<Monster> findByGrowhpLessThan(Integer growhp);
	public Page<Monster> findByGrowhpLessThan(Integer growhp, Pageable page);
	public List<Monster> findByGrowhpLessThan(Integer growhp, Sort sort);
	public List<Monster> findByGrowhpGreaterThan(Integer growhp);
	public Page<Monster> findByGrowhpGreaterThan(Integer growhp, Pageable page);
	public List<Monster> findByGrowhpGreaterThan(Integer growhp, Sort sort);
	public List<Monster> findByGuardianspiritmodifier(Integer guardianspiritmodifier);
	public Page<Monster> findByGuardianspiritmodifier(Integer guardianspiritmodifier, Pageable page);
	public List<Monster> findByGuardianspiritmodifier(Integer guardianspiritmodifier, Sort sort);
	public List<Monster> findByGuardianspiritmodifierLessThan(Integer guardianspiritmodifier);
	public Page<Monster> findByGuardianspiritmodifierLessThan(Integer guardianspiritmodifier, Pageable page);
	public List<Monster> findByGuardianspiritmodifierLessThan(Integer guardianspiritmodifier, Sort sort);
	public List<Monster> findByGuardianspiritmodifierGreaterThan(Integer guardianspiritmodifier);
	public Page<Monster> findByGuardianspiritmodifierGreaterThan(Integer guardianspiritmodifier, Pageable page);
	public List<Monster> findByGuardianspiritmodifierGreaterThan(Integer guardianspiritmodifier, Sort sort);
	public List<Monster> findByH(Integer h);
	public Page<Monster> findByH(Integer h, Pageable page);
	public List<Monster> findByH(Integer h, Sort sort);
	public List<Monster> findByHLessThan(Integer h);
	public Page<Monster> findByHLessThan(Integer h, Pageable page);
	public List<Monster> findByHLessThan(Integer h, Sort sort);
	public List<Monster> findByHGreaterThan(Integer h);
	public Page<Monster> findByHGreaterThan(Integer h, Pageable page);
	public List<Monster> findByHGreaterThan(Integer h, Sort sort);
	public List<Monster> findByHalt(Integer halt);
	public Page<Monster> findByHalt(Integer halt, Pageable page);
	public List<Monster> findByHalt(Integer halt, Sort sort);
	public List<Monster> findByHaltLessThan(Integer halt);
	public Page<Monster> findByHaltLessThan(Integer halt, Pageable page);
	public List<Monster> findByHaltLessThan(Integer halt, Sort sort);
	public List<Monster> findByHaltGreaterThan(Integer halt);
	public Page<Monster> findByHaltGreaterThan(Integer halt, Pageable page);
	public List<Monster> findByHaltGreaterThan(Integer halt, Sort sort);
	public List<Monster> findByHand(Integer hand);
	public Page<Monster> findByHand(Integer hand, Pageable page);
	public List<Monster> findByHand(Integer hand, Sort sort);
	public List<Monster> findByHandLessThan(Integer hand);
	public Page<Monster> findByHandLessThan(Integer hand, Pageable page);
	public List<Monster> findByHandLessThan(Integer hand, Sort sort);
	public List<Monster> findByHandGreaterThan(Integer hand);
	public Page<Monster> findByHandGreaterThan(Integer hand, Pageable page);
	public List<Monster> findByHandGreaterThan(Integer hand, Sort sort);
	public List<Monster> findByHead(Integer head);
	public Page<Monster> findByHead(Integer head, Pageable page);
	public List<Monster> findByHead(Integer head, Sort sort);
	public List<Monster> findByHeadLessThan(Integer head);
	public Page<Monster> findByHeadLessThan(Integer head, Pageable page);
	public List<Monster> findByHeadLessThan(Integer head, Sort sort);
	public List<Monster> findByHeadGreaterThan(Integer head);
	public Page<Monster> findByHeadGreaterThan(Integer head, Pageable page);
	public List<Monster> findByHeadGreaterThan(Integer head, Sort sort);
	public List<Monster> findByHeal(Boolean heal);
	public Page<Monster> findByHeal(Boolean heal, Pageable page);
	public List<Monster> findByHeal(Boolean heal, Sort sort);
	public List<Monster> findByHeat(Integer heat);
	public Page<Monster> findByHeat(Integer heat, Pageable page);
	public List<Monster> findByHeat(Integer heat, Sort sort);
	public List<Monster> findByHeatLessThan(Integer heat);
	public Page<Monster> findByHeatLessThan(Integer heat, Pageable page);
	public List<Monster> findByHeatLessThan(Integer heat, Sort sort);
	public List<Monster> findByHeatGreaterThan(Integer heat);
	public Page<Monster> findByHeatGreaterThan(Integer heat, Pageable page);
	public List<Monster> findByHeatGreaterThan(Integer heat, Sort sort);
	public List<Monster> findByHeatrec(Boolean heatrec);
	public Page<Monster> findByHeatrec(Boolean heatrec, Pageable page);
	public List<Monster> findByHeatrec(Boolean heatrec, Sort sort);
	public List<Monster> findByHeretic(Integer heretic);
	public Page<Monster> findByHeretic(Integer heretic, Pageable page);
	public List<Monster> findByHeretic(Integer heretic, Sort sort);
	public List<Monster> findByHereticLessThan(Integer heretic);
	public Page<Monster> findByHereticLessThan(Integer heretic, Pageable page);
	public List<Monster> findByHereticLessThan(Integer heretic, Sort sort);
	public List<Monster> findByHereticGreaterThan(Integer heretic);
	public Page<Monster> findByHereticGreaterThan(Integer heretic, Pageable page);
	public List<Monster> findByHereticGreaterThan(Integer heretic, Sort sort);
	public List<Monster> findByHeroarrivallimit(Integer heroarrivallimit);
	public Page<Monster> findByHeroarrivallimit(Integer heroarrivallimit, Pageable page);
	public List<Monster> findByHeroarrivallimit(Integer heroarrivallimit, Sort sort);
	public List<Monster> findByHeroarrivallimitLessThan(Integer heroarrivallimit);
	public Page<Monster> findByHeroarrivallimitLessThan(Integer heroarrivallimit, Pageable page);
	public List<Monster> findByHeroarrivallimitLessThan(Integer heroarrivallimit, Sort sort);
	public List<Monster> findByHeroarrivallimitGreaterThan(Integer heroarrivallimit);
	public Page<Monster> findByHeroarrivallimitGreaterThan(Integer heroarrivallimit, Pageable page);
	public List<Monster> findByHeroarrivallimitGreaterThan(Integer heroarrivallimit, Sort sort);
	public List<Monster> findByHoly(Boolean holy);
	public Page<Monster> findByHoly(Boolean holy, Pageable page);
	public List<Monster> findByHoly(Boolean holy, Sort sort);
	public List<Monster> findByHomeshape(Integer homeshape);
	public Page<Monster> findByHomeshape(Integer homeshape, Pageable page);
	public List<Monster> findByHomeshape(Integer homeshape, Sort sort);
	public List<Monster> findByHomeshapeLessThan(Integer homeshape);
	public Page<Monster> findByHomeshapeLessThan(Integer homeshape, Pageable page);
	public List<Monster> findByHomeshapeLessThan(Integer homeshape, Sort sort);
	public List<Monster> findByHomeshapeGreaterThan(Integer homeshape);
	public Page<Monster> findByHomeshapeGreaterThan(Integer homeshape, Pageable page);
	public List<Monster> findByHomeshapeGreaterThan(Integer homeshape, Sort sort);
	public List<Monster> findByHomesick(Integer homesick);
	public Page<Monster> findByHomesick(Integer homesick, Pageable page);
	public List<Monster> findByHomesick(Integer homesick, Sort sort);
	public List<Monster> findByHomesickLessThan(Integer homesick);
	public Page<Monster> findByHomesickLessThan(Integer homesick, Pageable page);
	public List<Monster> findByHomesickLessThan(Integer homesick, Sort sort);
	public List<Monster> findByHomesickGreaterThan(Integer homesick);
	public Page<Monster> findByHomesickGreaterThan(Integer homesick, Pageable page);
	public List<Monster> findByHomesickGreaterThan(Integer homesick, Sort sort);
	public List<Monster> findByHorror(Integer horror);
	public Page<Monster> findByHorror(Integer horror, Pageable page);
	public List<Monster> findByHorror(Integer horror, Sort sort);
	public List<Monster> findByHorrorLessThan(Integer horror);
	public Page<Monster> findByHorrorLessThan(Integer horror, Pageable page);
	public List<Monster> findByHorrorLessThan(Integer horror, Sort sort);
	public List<Monster> findByHorrorGreaterThan(Integer horror);
	public Page<Monster> findByHorrorGreaterThan(Integer horror, Pageable page);
	public List<Monster> findByHorrorGreaterThan(Integer horror, Sort sort);
	public List<Monster> findByHorrormarked(Boolean horrormarked);
	public Page<Monster> findByHorrormarked(Boolean horrormarked, Pageable page);
	public List<Monster> findByHorrormarked(Boolean horrormarked, Sort sort);
	public List<Monster> findByHorrorsonly(Integer horrorsonly);
	public Page<Monster> findByHorrorsonly(Integer horrorsonly, Pageable page);
	public List<Monster> findByHorrorsonly(Integer horrorsonly, Sort sort);
	public List<Monster> findByHorrorsonlyLessThan(Integer horrorsonly);
	public Page<Monster> findByHorrorsonlyLessThan(Integer horrorsonly, Pageable page);
	public List<Monster> findByHorrorsonlyLessThan(Integer horrorsonly, Sort sort);
	public List<Monster> findByHorrorsonlyGreaterThan(Integer horrorsonly);
	public Page<Monster> findByHorrorsonlyGreaterThan(Integer horrorsonly, Pageable page);
	public List<Monster> findByHorrorsonlyGreaterThan(Integer horrorsonly, Sort sort);
	public List<Monster> findByHorsetattoo(Integer horsetattoo);
	public Page<Monster> findByHorsetattoo(Integer horsetattoo, Pageable page);
	public List<Monster> findByHorsetattoo(Integer horsetattoo, Sort sort);
	public List<Monster> findByHorsetattooLessThan(Integer horsetattoo);
	public Page<Monster> findByHorsetattooLessThan(Integer horsetattoo, Pageable page);
	public List<Monster> findByHorsetattooLessThan(Integer horsetattoo, Sort sort);
	public List<Monster> findByHorsetattooGreaterThan(Integer horsetattoo);
	public Page<Monster> findByHorsetattooGreaterThan(Integer horsetattoo, Pageable page);
	public List<Monster> findByHorsetattooGreaterThan(Integer horsetattoo, Sort sort);
	public List<Monster> findByHp(Integer hp);
	public Page<Monster> findByHp(Integer hp, Pageable page);
	public List<Monster> findByHp(Integer hp, Sort sort);
	public List<Monster> findByHpLessThan(Integer hp);
	public Page<Monster> findByHpLessThan(Integer hp, Pageable page);
	public List<Monster> findByHpLessThan(Integer hp, Sort sort);
	public List<Monster> findByHpGreaterThan(Integer hp);
	public Page<Monster> findByHpGreaterThan(Integer hp, Pageable page);
	public List<Monster> findByHpGreaterThan(Integer hp, Sort sort);
	public List<Monster> findByHpoverslow(Integer hpoverslow);
	public Page<Monster> findByHpoverslow(Integer hpoverslow, Pageable page);
	public List<Monster> findByHpoverslow(Integer hpoverslow, Sort sort);
	public List<Monster> findByHpoverslowLessThan(Integer hpoverslow);
	public Page<Monster> findByHpoverslowLessThan(Integer hpoverslow, Pageable page);
	public List<Monster> findByHpoverslowLessThan(Integer hpoverslow, Sort sort);
	public List<Monster> findByHpoverslowGreaterThan(Integer hpoverslow);
	public Page<Monster> findByHpoverslowGreaterThan(Integer hpoverslow, Pageable page);
	public List<Monster> findByHpoverslowGreaterThan(Integer hpoverslow, Sort sort);
	public List<Monster> findByIceforging(Integer iceforging);
	public Page<Monster> findByIceforging(Integer iceforging, Pageable page);
	public List<Monster> findByIceforging(Integer iceforging, Sort sort);
	public List<Monster> findByIceforgingLessThan(Integer iceforging);
	public Page<Monster> findByIceforgingLessThan(Integer iceforging, Pageable page);
	public List<Monster> findByIceforgingLessThan(Integer iceforging, Sort sort);
	public List<Monster> findByIceforgingGreaterThan(Integer iceforging);
	public Page<Monster> findByIceforgingGreaterThan(Integer iceforging, Pageable page);
	public List<Monster> findByIceforgingGreaterThan(Integer iceforging, Sort sort);
	public List<Monster> findByIceprot(Integer iceprot);
	public Page<Monster> findByIceprot(Integer iceprot, Pageable page);
	public List<Monster> findByIceprot(Integer iceprot, Sort sort);
	public List<Monster> findByIceprotLessThan(Integer iceprot);
	public Page<Monster> findByIceprotLessThan(Integer iceprot, Pageable page);
	public List<Monster> findByIceprotLessThan(Integer iceprot, Sort sort);
	public List<Monster> findByIceprotGreaterThan(Integer iceprot);
	public Page<Monster> findByIceprotGreaterThan(Integer iceprot, Pageable page);
	public List<Monster> findByIceprotGreaterThan(Integer iceprot, Sort sort);
	public List<Monster> findByIllusion(Boolean illusion);
	public Page<Monster> findByIllusion(Boolean illusion, Pageable page);
	public List<Monster> findByIllusion(Boolean illusion, Sort sort);
	public List<Monster> findByImmobile(Boolean immobile);
	public Page<Monster> findByImmobile(Boolean immobile, Pageable page);
	public List<Monster> findByImmobile(Boolean immobile, Sort sort);
	public List<Monster> findByImmortal(Boolean immortal);
	public Page<Monster> findByImmortal(Boolean immortal, Pageable page);
	public List<Monster> findByImmortal(Boolean immortal, Sort sort);
	public List<Monster> findByInanimate(Boolean inanimate);
	public Page<Monster> findByInanimate(Boolean inanimate, Pageable page);
	public List<Monster> findByInanimate(Boolean inanimate, Sort sort);
	public List<Monster> findByIncorporate(Boolean incorporate);
	public Page<Monster> findByIncorporate(Boolean incorporate, Pageable page);
	public List<Monster> findByIncorporate(Boolean incorporate, Sort sort);
	public List<Monster> findByIncprovdef(Boolean incprovdef);
	public Page<Monster> findByIncprovdef(Boolean incprovdef, Pageable page);
	public List<Monster> findByIncprovdef(Boolean incprovdef, Sort sort);
	public List<Monster> findByIncunrest(Integer incunrest);
	public Page<Monster> findByIncunrest(Integer incunrest, Pageable page);
	public List<Monster> findByIncunrest(Integer incunrest, Sort sort);
	public List<Monster> findByIncunrestLessThan(Integer incunrest);
	public Page<Monster> findByIncunrestLessThan(Integer incunrest, Pageable page);
	public List<Monster> findByIncunrestLessThan(Integer incunrest, Sort sort);
	public List<Monster> findByIncunrestGreaterThan(Integer incunrest);
	public Page<Monster> findByIncunrestGreaterThan(Integer incunrest, Pageable page);
	public List<Monster> findByIncunrestGreaterThan(Integer incunrest, Sort sort);
	public List<Monster> findByIndepmove(Integer indepmove);
	public Page<Monster> findByIndepmove(Integer indepmove, Pageable page);
	public List<Monster> findByIndepmove(Integer indepmove, Sort sort);
	public List<Monster> findByIndepmoveLessThan(Integer indepmove);
	public Page<Monster> findByIndepmoveLessThan(Integer indepmove, Pageable page);
	public List<Monster> findByIndepmoveLessThan(Integer indepmove, Sort sort);
	public List<Monster> findByIndepmoveGreaterThan(Integer indepmove);
	public Page<Monster> findByIndepmoveGreaterThan(Integer indepmove, Pageable page);
	public List<Monster> findByIndepmoveGreaterThan(Integer indepmove, Sort sort);
	public List<Monster> findByInfernalcrossbreedingmult(Integer infernalcrossbreedingmult);
	public Page<Monster> findByInfernalcrossbreedingmult(Integer infernalcrossbreedingmult, Pageable page);
	public List<Monster> findByInfernalcrossbreedingmult(Integer infernalcrossbreedingmult, Sort sort);
	public List<Monster> findByInfernalcrossbreedingmultLessThan(Integer infernalcrossbreedingmult);
	public Page<Monster> findByInfernalcrossbreedingmultLessThan(Integer infernalcrossbreedingmult, Pageable page);
	public List<Monster> findByInfernalcrossbreedingmultLessThan(Integer infernalcrossbreedingmult, Sort sort);
	public List<Monster> findByInfernalcrossbreedingmultGreaterThan(Integer infernalcrossbreedingmult);
	public Page<Monster> findByInfernalcrossbreedingmultGreaterThan(Integer infernalcrossbreedingmult, Pageable page);
	public List<Monster> findByInfernalcrossbreedingmultGreaterThan(Integer infernalcrossbreedingmult, Sort sort);
	public List<Monster> findByInfernoret(Integer infernoret);
	public Page<Monster> findByInfernoret(Integer infernoret, Pageable page);
	public List<Monster> findByInfernoret(Integer infernoret, Sort sort);
	public List<Monster> findByInfernoretLessThan(Integer infernoret);
	public Page<Monster> findByInfernoretLessThan(Integer infernoret, Pageable page);
	public List<Monster> findByInfernoretLessThan(Integer infernoret, Sort sort);
	public List<Monster> findByInfernoretGreaterThan(Integer infernoret);
	public Page<Monster> findByInfernoretGreaterThan(Integer infernoret, Pageable page);
	public List<Monster> findByInfernoretGreaterThan(Integer infernoret, Sort sort);
	public List<Monster> findByInn(Integer inn);
	public Page<Monster> findByInn(Integer inn, Pageable page);
	public List<Monster> findByInn(Integer inn, Sort sort);
	public List<Monster> findByInnLessThan(Integer inn);
	public Page<Monster> findByInnLessThan(Integer inn, Pageable page);
	public List<Monster> findByInnLessThan(Integer inn, Sort sort);
	public List<Monster> findByInnGreaterThan(Integer inn);
	public Page<Monster> findByInnGreaterThan(Integer inn, Pageable page);
	public List<Monster> findByInnGreaterThan(Integer inn, Sort sort);
	public List<Monster> findByInquisitor(Boolean inquisitor);
	public Page<Monster> findByInquisitor(Boolean inquisitor, Pageable page);
	public List<Monster> findByInquisitor(Boolean inquisitor, Sort sort);
	public List<Monster> findByInsane(Integer insane);
	public Page<Monster> findByInsane(Integer insane, Pageable page);
	public List<Monster> findByInsane(Integer insane, Sort sort);
	public List<Monster> findByInsaneLessThan(Integer insane);
	public Page<Monster> findByInsaneLessThan(Integer insane, Pageable page);
	public List<Monster> findByInsaneLessThan(Integer insane, Sort sort);
	public List<Monster> findByInsaneGreaterThan(Integer insane);
	public Page<Monster> findByInsaneGreaterThan(Integer insane, Pageable page);
	public List<Monster> findByInsaneGreaterThan(Integer insane, Sort sort);
	public List<Monster> findByInspirational(Integer inspirational);
	public Page<Monster> findByInspirational(Integer inspirational, Pageable page);
	public List<Monster> findByInspirational(Integer inspirational, Sort sort);
	public List<Monster> findByInspirationalLessThan(Integer inspirational);
	public Page<Monster> findByInspirationalLessThan(Integer inspirational, Pageable page);
	public List<Monster> findByInspirationalLessThan(Integer inspirational, Sort sort);
	public List<Monster> findByInspirationalGreaterThan(Integer inspirational);
	public Page<Monster> findByInspirationalGreaterThan(Integer inspirational, Pageable page);
	public List<Monster> findByInspirationalGreaterThan(Integer inspirational, Sort sort);
	public List<Monster> findByInspiringres(Integer inspiringres);
	public Page<Monster> findByInspiringres(Integer inspiringres, Pageable page);
	public List<Monster> findByInspiringres(Integer inspiringres, Sort sort);
	public List<Monster> findByInspiringresLessThan(Integer inspiringres);
	public Page<Monster> findByInspiringresLessThan(Integer inspiringres, Pageable page);
	public List<Monster> findByInspiringresLessThan(Integer inspiringres, Sort sort);
	public List<Monster> findByInspiringresGreaterThan(Integer inspiringres);
	public Page<Monster> findByInspiringresGreaterThan(Integer inspiringres, Pageable page);
	public List<Monster> findByInspiringresGreaterThan(Integer inspiringres, Sort sort);
	public List<Monster> findByInvisibility(Boolean invisibility);
	public Page<Monster> findByInvisibility(Boolean invisibility, Pageable page);
	public List<Monster> findByInvisibility(Boolean invisibility, Sort sort);
	public List<Monster> findByInvulnerable(Integer invulnerable);
	public Page<Monster> findByInvulnerable(Integer invulnerable, Pageable page);
	public List<Monster> findByInvulnerable(Integer invulnerable, Sort sort);
	public List<Monster> findByInvulnerableLessThan(Integer invulnerable);
	public Page<Monster> findByInvulnerableLessThan(Integer invulnerable, Pageable page);
	public List<Monster> findByInvulnerableLessThan(Integer invulnerable, Sort sort);
	public List<Monster> findByInvulnerableGreaterThan(Integer invulnerable);
	public Page<Monster> findByInvulnerableGreaterThan(Integer invulnerable, Pageable page);
	public List<Monster> findByInvulnerableGreaterThan(Integer invulnerable, Sort sort);
	public List<Monster> findByIsadaeva(Boolean isadaeva);
	public Page<Monster> findByIsadaeva(Boolean isadaeva, Pageable page);
	public List<Monster> findByIsadaeva(Boolean isadaeva, Sort sort);
	public List<Monster> findByIsashah(Boolean isashah);
	public Page<Monster> findByIsashah(Boolean isashah, Pageable page);
	public List<Monster> findByIsashah(Boolean isashah, Sort sort);
	public List<Monster> findByIsayazad(Boolean isayazad);
	public Page<Monster> findByIsayazad(Boolean isayazad, Pageable page);
	public List<Monster> findByIsayazad(Boolean isayazad, Sort sort);
	public List<Monster> findByIvylord(Integer ivylord);
	public Page<Monster> findByIvylord(Integer ivylord, Pageable page);
	public List<Monster> findByIvylord(Integer ivylord, Sort sort);
	public List<Monster> findByIvylordLessThan(Integer ivylord);
	public Page<Monster> findByIvylordLessThan(Integer ivylord, Pageable page);
	public List<Monster> findByIvylordLessThan(Integer ivylord, Sort sort);
	public List<Monster> findByIvylordGreaterThan(Integer ivylord);
	public Page<Monster> findByIvylordGreaterThan(Integer ivylord, Pageable page);
	public List<Monster> findByIvylordGreaterThan(Integer ivylord, Sort sort);
	public List<Monster> findByKokytosret(Integer kokytosret);
	public Page<Monster> findByKokytosret(Integer kokytosret, Pageable page);
	public List<Monster> findByKokytosret(Integer kokytosret, Sort sort);
	public List<Monster> findByKokytosretLessThan(Integer kokytosret);
	public Page<Monster> findByKokytosretLessThan(Integer kokytosret, Pageable page);
	public List<Monster> findByKokytosretLessThan(Integer kokytosret, Sort sort);
	public List<Monster> findByKokytosretGreaterThan(Integer kokytosret);
	public Page<Monster> findByKokytosretGreaterThan(Integer kokytosret, Pageable page);
	public List<Monster> findByKokytosretGreaterThan(Integer kokytosret, Sort sort);
	public List<Monster> findByLamiabonus(Integer lamiabonus);
	public Page<Monster> findByLamiabonus(Integer lamiabonus, Pageable page);
	public List<Monster> findByLamiabonus(Integer lamiabonus, Sort sort);
	public List<Monster> findByLamiabonusLessThan(Integer lamiabonus);
	public Page<Monster> findByLamiabonusLessThan(Integer lamiabonus, Pageable page);
	public List<Monster> findByLamiabonusLessThan(Integer lamiabonus, Sort sort);
	public List<Monster> findByLamiabonusGreaterThan(Integer lamiabonus);
	public Page<Monster> findByLamiabonusGreaterThan(Integer lamiabonus, Pageable page);
	public List<Monster> findByLamiabonusGreaterThan(Integer lamiabonus, Sort sort);
	public List<Monster> findByLanddamage(Integer landdamage);
	public Page<Monster> findByLanddamage(Integer landdamage, Pageable page);
	public List<Monster> findByLanddamage(Integer landdamage, Sort sort);
	public List<Monster> findByLanddamageLessThan(Integer landdamage);
	public Page<Monster> findByLanddamageLessThan(Integer landdamage, Pageable page);
	public List<Monster> findByLanddamageLessThan(Integer landdamage, Sort sort);
	public List<Monster> findByLanddamageGreaterThan(Integer landdamage);
	public Page<Monster> findByLanddamageGreaterThan(Integer landdamage, Pageable page);
	public List<Monster> findByLanddamageGreaterThan(Integer landdamage, Sort sort);
	public List<Monster> findByLandreinvigoration(Integer landreinvigoration);
	public Page<Monster> findByLandreinvigoration(Integer landreinvigoration, Pageable page);
	public List<Monster> findByLandreinvigoration(Integer landreinvigoration, Sort sort);
	public List<Monster> findByLandreinvigorationLessThan(Integer landreinvigoration);
	public Page<Monster> findByLandreinvigorationLessThan(Integer landreinvigoration, Pageable page);
	public List<Monster> findByLandreinvigorationLessThan(Integer landreinvigoration, Sort sort);
	public List<Monster> findByLandreinvigorationGreaterThan(Integer landreinvigoration);
	public Page<Monster> findByLandreinvigorationGreaterThan(Integer landreinvigoration, Pageable page);
	public List<Monster> findByLandreinvigorationGreaterThan(Integer landreinvigoration, Sort sort);
	public List<Monster> findByLandshape(Integer landshape);
	public Page<Monster> findByLandshape(Integer landshape, Pageable page);
	public List<Monster> findByLandshape(Integer landshape, Sort sort);
	public List<Monster> findByLandshapeLessThan(Integer landshape);
	public Page<Monster> findByLandshapeLessThan(Integer landshape, Pageable page);
	public List<Monster> findByLandshapeLessThan(Integer landshape, Sort sort);
	public List<Monster> findByLandshapeGreaterThan(Integer landshape);
	public Page<Monster> findByLandshapeGreaterThan(Integer landshape, Pageable page);
	public List<Monster> findByLandshapeGreaterThan(Integer landshape, Sort sort);
	public List<Monster> findByLeader(Integer leader);
	public Page<Monster> findByLeader(Integer leader, Pageable page);
	public List<Monster> findByLeader(Integer leader, Sort sort);
	public List<Monster> findByLeaderLessThan(Integer leader);
	public Page<Monster> findByLeaderLessThan(Integer leader, Pageable page);
	public List<Monster> findByLeaderLessThan(Integer leader, Sort sort);
	public List<Monster> findByLeaderGreaterThan(Integer leader);
	public Page<Monster> findByLeaderGreaterThan(Integer leader, Pageable page);
	public List<Monster> findByLeaderGreaterThan(Integer leader, Sort sort);
	public List<Monster> findByLeavespostbattleifwoundedorhaskilled(Boolean leavespostbattleifwoundedorhaskilled);
	public Page<Monster> findByLeavespostbattleifwoundedorhaskilled(Boolean leavespostbattleifwoundedorhaskilled, Pageable page);
	public List<Monster> findByLeavespostbattleifwoundedorhaskilled(Boolean leavespostbattleifwoundedorhaskilled, Sort sort);
	public List<Monster> findByLeper(Integer leper);
	public Page<Monster> findByLeper(Integer leper, Pageable page);
	public List<Monster> findByLeper(Integer leper, Sort sort);
	public List<Monster> findByLeperLessThan(Integer leper);
	public Page<Monster> findByLeperLessThan(Integer leper, Pageable page);
	public List<Monster> findByLeperLessThan(Integer leper, Sort sort);
	public List<Monster> findByLeperGreaterThan(Integer leper);
	public Page<Monster> findByLeperGreaterThan(Integer leper, Pageable page);
	public List<Monster> findByLeperGreaterThan(Integer leper, Sort sort);
	public List<Monster> findByLink1(Integer link1);
	public Page<Monster> findByLink1(Integer link1, Pageable page);
	public List<Monster> findByLink1(Integer link1, Sort sort);
	public List<Monster> findByLink1LessThan(Integer link1);
	public Page<Monster> findByLink1LessThan(Integer link1, Pageable page);
	public List<Monster> findByLink1LessThan(Integer link1, Sort sort);
	public List<Monster> findByLink1GreaterThan(Integer link1);
	public Page<Monster> findByLink1GreaterThan(Integer link1, Pageable page);
	public List<Monster> findByLink1GreaterThan(Integer link1, Sort sort);
	public List<Monster> findByLink2(Integer link2);
	public Page<Monster> findByLink2(Integer link2, Pageable page);
	public List<Monster> findByLink2(Integer link2, Sort sort);
	public List<Monster> findByLink2LessThan(Integer link2);
	public Page<Monster> findByLink2LessThan(Integer link2, Pageable page);
	public List<Monster> findByLink2LessThan(Integer link2, Sort sort);
	public List<Monster> findByLink2GreaterThan(Integer link2);
	public Page<Monster> findByLink2GreaterThan(Integer link2, Pageable page);
	public List<Monster> findByLink2GreaterThan(Integer link2, Sort sort);
	public List<Monster> findByLink3(Boolean link3);
	public Page<Monster> findByLink3(Boolean link3, Pageable page);
	public List<Monster> findByLink3(Boolean link3, Sort sort);
	public List<Monster> findByLink4(Boolean link4);
	public Page<Monster> findByLink4(Boolean link4, Pageable page);
	public List<Monster> findByLink4(Boolean link4, Sort sort);
	public List<Monster> findByLink5(Boolean link5);
	public Page<Monster> findByLink5(Boolean link5, Pageable page);
	public List<Monster> findByLink5(Boolean link5, Sort sort);
	public List<Monster> findByLink6(Boolean link6);
	public Page<Monster> findByLink6(Boolean link6, Pageable page);
	public List<Monster> findByLink6(Boolean link6, Sort sort);
	public List<Monster> findByMagicallyattunedresearcher(Boolean magicallyattunedresearcher);
	public Page<Monster> findByMagicallyattunedresearcher(Boolean magicallyattunedresearcher, Pageable page);
	public List<Monster> findByMagicallyattunedresearcher(Boolean magicallyattunedresearcher, Sort sort);
	public List<Monster> findByMagicbeing(Boolean magicbeing);
	public Page<Monster> findByMagicbeing(Boolean magicbeing, Pageable page);
	public List<Monster> findByMagicbeing(Boolean magicbeing, Sort sort);
	public List<Monster> findByMagicboosta(Integer magicboosta);
	public Page<Monster> findByMagicboosta(Integer magicboosta, Pageable page);
	public List<Monster> findByMagicboosta(Integer magicboosta, Sort sort);
	public List<Monster> findByMagicboostaLessThan(Integer magicboosta);
	public Page<Monster> findByMagicboostaLessThan(Integer magicboosta, Pageable page);
	public List<Monster> findByMagicboostaLessThan(Integer magicboosta, Sort sort);
	public List<Monster> findByMagicboostaGreaterThan(Integer magicboosta);
	public Page<Monster> findByMagicboostaGreaterThan(Integer magicboosta, Pageable page);
	public List<Monster> findByMagicboostaGreaterThan(Integer magicboosta, Sort sort);
	public List<Monster> findByMagicboostall(Integer magicboostall);
	public Page<Monster> findByMagicboostall(Integer magicboostall, Pageable page);
	public List<Monster> findByMagicboostall(Integer magicboostall, Sort sort);
	public List<Monster> findByMagicboostallLessThan(Integer magicboostall);
	public Page<Monster> findByMagicboostallLessThan(Integer magicboostall, Pageable page);
	public List<Monster> findByMagicboostallLessThan(Integer magicboostall, Sort sort);
	public List<Monster> findByMagicboostallGreaterThan(Integer magicboostall);
	public Page<Monster> findByMagicboostallGreaterThan(Integer magicboostall, Pageable page);
	public List<Monster> findByMagicboostallGreaterThan(Integer magicboostall, Sort sort);
	public List<Monster> findByMagicboostd(Integer magicboostd);
	public Page<Monster> findByMagicboostd(Integer magicboostd, Pageable page);
	public List<Monster> findByMagicboostd(Integer magicboostd, Sort sort);
	public List<Monster> findByMagicboostdLessThan(Integer magicboostd);
	public Page<Monster> findByMagicboostdLessThan(Integer magicboostd, Pageable page);
	public List<Monster> findByMagicboostdLessThan(Integer magicboostd, Sort sort);
	public List<Monster> findByMagicboostdGreaterThan(Integer magicboostd);
	public Page<Monster> findByMagicboostdGreaterThan(Integer magicboostd, Pageable page);
	public List<Monster> findByMagicboostdGreaterThan(Integer magicboostd, Sort sort);
	public List<Monster> findByMagicbooste(Integer magicbooste);
	public Page<Monster> findByMagicbooste(Integer magicbooste, Pageable page);
	public List<Monster> findByMagicbooste(Integer magicbooste, Sort sort);
	public List<Monster> findByMagicboosteLessThan(Integer magicbooste);
	public Page<Monster> findByMagicboosteLessThan(Integer magicbooste, Pageable page);
	public List<Monster> findByMagicboosteLessThan(Integer magicbooste, Sort sort);
	public List<Monster> findByMagicboosteGreaterThan(Integer magicbooste);
	public Page<Monster> findByMagicboosteGreaterThan(Integer magicbooste, Pageable page);
	public List<Monster> findByMagicboosteGreaterThan(Integer magicbooste, Sort sort);
	public List<Monster> findByMagicboostf(Integer magicboostf);
	public Page<Monster> findByMagicboostf(Integer magicboostf, Pageable page);
	public List<Monster> findByMagicboostf(Integer magicboostf, Sort sort);
	public List<Monster> findByMagicboostfLessThan(Integer magicboostf);
	public Page<Monster> findByMagicboostfLessThan(Integer magicboostf, Pageable page);
	public List<Monster> findByMagicboostfLessThan(Integer magicboostf, Sort sort);
	public List<Monster> findByMagicboostfGreaterThan(Integer magicboostf);
	public Page<Monster> findByMagicboostfGreaterThan(Integer magicboostf, Pageable page);
	public List<Monster> findByMagicboostfGreaterThan(Integer magicboostf, Sort sort);
	public List<Monster> findByMagicboostn(Integer magicboostn);
	public Page<Monster> findByMagicboostn(Integer magicboostn, Pageable page);
	public List<Monster> findByMagicboostn(Integer magicboostn, Sort sort);
	public List<Monster> findByMagicboostnLessThan(Integer magicboostn);
	public Page<Monster> findByMagicboostnLessThan(Integer magicboostn, Pageable page);
	public List<Monster> findByMagicboostnLessThan(Integer magicboostn, Sort sort);
	public List<Monster> findByMagicboostnGreaterThan(Integer magicboostn);
	public Page<Monster> findByMagicboostnGreaterThan(Integer magicboostn, Pageable page);
	public List<Monster> findByMagicboostnGreaterThan(Integer magicboostn, Sort sort);
	public List<Monster> findByMagicboosts(Integer magicboosts);
	public Page<Monster> findByMagicboosts(Integer magicboosts, Pageable page);
	public List<Monster> findByMagicboosts(Integer magicboosts, Sort sort);
	public List<Monster> findByMagicboostsLessThan(Integer magicboosts);
	public Page<Monster> findByMagicboostsLessThan(Integer magicboosts, Pageable page);
	public List<Monster> findByMagicboostsLessThan(Integer magicboosts, Sort sort);
	public List<Monster> findByMagicboostsGreaterThan(Integer magicboosts);
	public Page<Monster> findByMagicboostsGreaterThan(Integer magicboosts, Pageable page);
	public List<Monster> findByMagicboostsGreaterThan(Integer magicboosts, Sort sort);
	public List<Monster> findByMagicboostw(Integer magicboostw);
	public Page<Monster> findByMagicboostw(Integer magicboostw, Pageable page);
	public List<Monster> findByMagicboostw(Integer magicboostw, Sort sort);
	public List<Monster> findByMagicboostwLessThan(Integer magicboostw);
	public Page<Monster> findByMagicboostwLessThan(Integer magicboostw, Pageable page);
	public List<Monster> findByMagicboostwLessThan(Integer magicboostw, Sort sort);
	public List<Monster> findByMagicboostwGreaterThan(Integer magicboostw);
	public Page<Monster> findByMagicboostwGreaterThan(Integer magicboostw, Pageable page);
	public List<Monster> findByMagicboostwGreaterThan(Integer magicboostw, Sort sort);
	public List<Monster> findByMagicleader(Integer magicleader);
	public Page<Monster> findByMagicleader(Integer magicleader, Pageable page);
	public List<Monster> findByMagicleader(Integer magicleader, Sort sort);
	public List<Monster> findByMagicleaderLessThan(Integer magicleader);
	public Page<Monster> findByMagicleaderLessThan(Integer magicleader, Pageable page);
	public List<Monster> findByMagicleaderLessThan(Integer magicleader, Sort sort);
	public List<Monster> findByMagicleaderGreaterThan(Integer magicleader);
	public Page<Monster> findByMagicleaderGreaterThan(Integer magicleader, Pageable page);
	public List<Monster> findByMagicleaderGreaterThan(Integer magicleader, Sort sort);
	public List<Monster> findByMagicpower(Integer magicpower);
	public Page<Monster> findByMagicpower(Integer magicpower, Pageable page);
	public List<Monster> findByMagicpower(Integer magicpower, Sort sort);
	public List<Monster> findByMagicpowerLessThan(Integer magicpower);
	public Page<Monster> findByMagicpowerLessThan(Integer magicpower, Pageable page);
	public List<Monster> findByMagicpowerLessThan(Integer magicpower, Sort sort);
	public List<Monster> findByMagicpowerGreaterThan(Integer magicpower);
	public Page<Monster> findByMagicpowerGreaterThan(Integer magicpower, Pageable page);
	public List<Monster> findByMagicpowerGreaterThan(Integer magicpower, Sort sort);
	public List<Monster> findByMakepearls(Integer makepearls);
	public Page<Monster> findByMakepearls(Integer makepearls, Pageable page);
	public List<Monster> findByMakepearls(Integer makepearls, Sort sort);
	public List<Monster> findByMakepearlsLessThan(Integer makepearls);
	public Page<Monster> findByMakepearlsLessThan(Integer makepearls, Pageable page);
	public List<Monster> findByMakepearlsLessThan(Integer makepearls, Sort sort);
	public List<Monster> findByMakepearlsGreaterThan(Integer makepearls);
	public Page<Monster> findByMakepearlsGreaterThan(Integer makepearls, Pageable page);
	public List<Monster> findByMakepearlsGreaterThan(Integer makepearls, Sort sort);
	public List<Monster> findByMakesarmylooksmallerorlarger(Integer makesarmylooksmallerorlarger);
	public Page<Monster> findByMakesarmylooksmallerorlarger(Integer makesarmylooksmallerorlarger, Pageable page);
	public List<Monster> findByMakesarmylooksmallerorlarger(Integer makesarmylooksmallerorlarger, Sort sort);
	public List<Monster> findByMakesarmylooksmallerorlargerLessThan(Integer makesarmylooksmallerorlarger);
	public Page<Monster> findByMakesarmylooksmallerorlargerLessThan(Integer makesarmylooksmallerorlarger, Pageable page);
	public List<Monster> findByMakesarmylooksmallerorlargerLessThan(Integer makesarmylooksmallerorlarger, Sort sort);
	public List<Monster> findByMakesarmylooksmallerorlargerGreaterThan(Integer makesarmylooksmallerorlarger);
	public Page<Monster> findByMakesarmylooksmallerorlargerGreaterThan(Integer makesarmylooksmallerorlarger, Pageable page);
	public List<Monster> findByMakesarmylooksmallerorlargerGreaterThan(Integer makesarmylooksmallerorlarger, Sort sort);
	public List<Monster> findByMapmove(Integer mapmove);
	public Page<Monster> findByMapmove(Integer mapmove, Pageable page);
	public List<Monster> findByMapmove(Integer mapmove, Sort sort);
	public List<Monster> findByMapmoveLessThan(Integer mapmove);
	public Page<Monster> findByMapmoveLessThan(Integer mapmove, Pageable page);
	public List<Monster> findByMapmoveLessThan(Integer mapmove, Sort sort);
	public List<Monster> findByMapmoveGreaterThan(Integer mapmove);
	public Page<Monster> findByMapmoveGreaterThan(Integer mapmove, Pageable page);
	public List<Monster> findByMapmoveGreaterThan(Integer mapmove, Sort sort);
	public List<Monster> findByMask1(Integer mask1);
	public Page<Monster> findByMask1(Integer mask1, Pageable page);
	public List<Monster> findByMask1(Integer mask1, Sort sort);
	public List<Monster> findByMask1LessThan(Integer mask1);
	public Page<Monster> findByMask1LessThan(Integer mask1, Pageable page);
	public List<Monster> findByMask1LessThan(Integer mask1, Sort sort);
	public List<Monster> findByMask1GreaterThan(Integer mask1);
	public Page<Monster> findByMask1GreaterThan(Integer mask1, Pageable page);
	public List<Monster> findByMask1GreaterThan(Integer mask1, Sort sort);
	public List<Monster> findByMask2(Integer mask2);
	public Page<Monster> findByMask2(Integer mask2, Pageable page);
	public List<Monster> findByMask2(Integer mask2, Sort sort);
	public List<Monster> findByMask2LessThan(Integer mask2);
	public Page<Monster> findByMask2LessThan(Integer mask2, Pageable page);
	public List<Monster> findByMask2LessThan(Integer mask2, Sort sort);
	public List<Monster> findByMask2GreaterThan(Integer mask2);
	public Page<Monster> findByMask2GreaterThan(Integer mask2, Pageable page);
	public List<Monster> findByMask2GreaterThan(Integer mask2, Sort sort);
	public List<Monster> findByMask3(Integer mask3);
	public Page<Monster> findByMask3(Integer mask3, Pageable page);
	public List<Monster> findByMask3(Integer mask3, Sort sort);
	public List<Monster> findByMask3LessThan(Integer mask3);
	public Page<Monster> findByMask3LessThan(Integer mask3, Pageable page);
	public List<Monster> findByMask3LessThan(Integer mask3, Sort sort);
	public List<Monster> findByMask3GreaterThan(Integer mask3);
	public Page<Monster> findByMask3GreaterThan(Integer mask3, Pageable page);
	public List<Monster> findByMask3GreaterThan(Integer mask3, Sort sort);
	public List<Monster> findByMask4(Integer mask4);
	public Page<Monster> findByMask4(Integer mask4, Pageable page);
	public List<Monster> findByMask4(Integer mask4, Sort sort);
	public List<Monster> findByMask4LessThan(Integer mask4);
	public Page<Monster> findByMask4LessThan(Integer mask4, Pageable page);
	public List<Monster> findByMask4LessThan(Integer mask4, Sort sort);
	public List<Monster> findByMask4GreaterThan(Integer mask4);
	public Page<Monster> findByMask4GreaterThan(Integer mask4, Pageable page);
	public List<Monster> findByMask4GreaterThan(Integer mask4, Sort sort);
	public List<Monster> findByMask5(Integer mask5);
	public Page<Monster> findByMask5(Integer mask5, Pageable page);
	public List<Monster> findByMask5(Integer mask5, Sort sort);
	public List<Monster> findByMask5LessThan(Integer mask5);
	public Page<Monster> findByMask5LessThan(Integer mask5, Pageable page);
	public List<Monster> findByMask5LessThan(Integer mask5, Sort sort);
	public List<Monster> findByMask5GreaterThan(Integer mask5);
	public Page<Monster> findByMask5GreaterThan(Integer mask5, Pageable page);
	public List<Monster> findByMask5GreaterThan(Integer mask5, Sort sort);
	public List<Monster> findByMask6(Integer mask6);
	public Page<Monster> findByMask6(Integer mask6, Pageable page);
	public List<Monster> findByMask6(Integer mask6, Sort sort);
	public List<Monster> findByMask6LessThan(Integer mask6);
	public Page<Monster> findByMask6LessThan(Integer mask6, Pageable page);
	public List<Monster> findByMask6LessThan(Integer mask6, Sort sort);
	public List<Monster> findByMask6GreaterThan(Integer mask6);
	public Page<Monster> findByMask6GreaterThan(Integer mask6, Pageable page);
	public List<Monster> findByMask6GreaterThan(Integer mask6, Sort sort);
}
